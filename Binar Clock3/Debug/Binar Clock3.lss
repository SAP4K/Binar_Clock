
Binar Clock3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000088a  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000008b9  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000008c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b97  00000000  00000000  000009cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a0e  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c3e  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00003bb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000302  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000091a  00000000  00000000  0000409a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  000049b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000808  00000808  0000087c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_I2C 00000010  000007d2  000007d2  00000846  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Start_I2C 00000010  000007e2  000007e2  00000856  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Stop_I2C 00000008  00000800  00000800  00000874  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Send_I2C 00000014  00000796  00000796  0000080a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Read_I2C 00000014  000007aa  000007aa  0000081e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.init_function 00000036  00000710  00000710  00000784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init_first_timing 00000022  00000746  00000746  000007ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.check_button 0000004a  0000060e  0000060e  00000682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    000001a2  00000080  00000080  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_1 00000014  000007be  000007be  00000832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.UART_TTL 00000018  00000768  00000768  000007dc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.Transmit_UART_TTL 0000000e  000007f2  000007f2  00000866  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.get_current_time 00000042  00000658  00000658  000006cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.run_minutes 0000003e  0000069a  0000069a  0000070e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.run_hours 00000038  000006d8  000006d8  0000074c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.init_watch 00000066  00000558  00000558  000005cc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.LED_OFF 00000050  000005be  000005be  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.Start   00000188  00000222  00000222  00000296  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.set_minutes 000000e2  000003aa  000003aa  0000041e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.set_hours 000000cc  0000048c  0000048c  00000500  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.__dummy_fini 00000002  00000810  00000810  00000884  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_funcs_on_exit 00000002  00000812  00000812  00000886  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_simulator_exit 00000002  00000814  00000814  00000888  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.exit    00000016  00000780  00000780  000007f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text._Exit   00000004  0000080c  0000080c  00000880  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_1>
   8:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
   c:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  10:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  14:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  18:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  1c:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  20:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  24:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  28:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  2c:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  30:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  34:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  38:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  3c:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  40:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  44:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  48:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  4c:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  50:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  54:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  58:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  5c:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  60:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>
  64:	0c 94 04 04 	jmp	0x808	; 0x808 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
  78:	0c 94 c0 03 	jmp	0x780	; 0x780 <exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

00000808 <__bad_interrupt>:
 808:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_I2C:

000007d2 <init_I2C>:

#include "I2C.h"
void init_I2C(void)
{
	TWBR = 0;
 7d2:	e8 eb       	ldi	r30, 0xB8	; 184
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	10 82       	st	Z, r1
	TWBR = 0x20;
 7d8:	80 e2       	ldi	r24, 0x20	; 32
 7da:	80 83       	st	Z, r24
	TWCR = 0;
 7dc:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7e0:	08 95       	ret

Disassembly of section .text.Start_I2C:

000007e2 <Start_I2C>:
}
void Start_I2C(void)
{
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
 7e2:	84 ea       	ldi	r24, 0xA4	; 164
 7e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR&(1<<TWINT)) == 0 );
 7e8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7ec:	88 23       	and	r24, r24
 7ee:	e4 f7       	brge	.-8      	; 0x7e8 <Start_I2C+0x6>
}
 7f0:	08 95       	ret

Disassembly of section .text.Stop_I2C:

00000800 <Stop_I2C>:
void Stop_I2C(void)
{
	TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
 800:	84 e9       	ldi	r24, 0x94	; 148
 802:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 806:	08 95       	ret

Disassembly of section .text.Send_I2C:

00000796 <Send_I2C>:
}
void Send_I2C(uint8_t data)
{
	TWDR = data;
 796:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 79a:	84 e8       	ldi	r24, 0x84	; 132
 79c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR&(1<<TWINT)) == 0 );
 7a0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7a4:	88 23       	and	r24, r24
 7a6:	e4 f7       	brge	.-8      	; 0x7a0 <Send_I2C+0xa>
}
 7a8:	08 95       	ret

Disassembly of section .text.Read_I2C:

000007aa <Read_I2C>:
uint8_t Read_I2C()
{
	TWCR=(1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 7aa:	84 ec       	ldi	r24, 0xC4	; 196
 7ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 7b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 7b4:	88 23       	and	r24, r24
 7b6:	e4 f7       	brge	.-8      	; 0x7b0 <Read_I2C+0x6>
	return TWDR;
 7b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 7bc:	08 95       	ret

Disassembly of section .text.init_function:

00000710 <init_function>:
#include "Watch.h"
void init_function(void)
{
	DDRD = 0;
 710:	1a b8       	out	0x0a, r1	; 10
	DDRD = (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7);
 712:	88 ef       	ldi	r24, 0xF8	; 248
 714:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PD2);
 716:	8a b1       	in	r24, 0x0a	; 10
 718:	8b 7f       	andi	r24, 0xFB	; 251
 71a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD2);
 71c:	8b b1       	in	r24, 0x0b	; 11
 71e:	84 60       	ori	r24, 0x04	; 4
 720:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0;
 722:	14 b8       	out	0x04, r1	; 4
	DDRB = (1<<PB5) | (1<<PB4) | (1<<PB3) | (1<<PB0);
 724:	89 e3       	ldi	r24, 0x39	; 57
 726:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;
 728:	17 b8       	out	0x07, r1	; 7
	DDRC = (1<<PC3) | (1<<PC2) | (1<<PC1) | (1<<PC0);
 72a:	8f e0       	ldi	r24, 0x0F	; 15
 72c:	87 b9       	out	0x07, r24	; 7
	
	ACSR |= (1 << ACD); //Disable ADC
 72e:	80 b7       	in	r24, 0x30	; 48
 730:	80 68       	ori	r24, 0x80	; 128
 732:	80 bf       	out	0x30, r24	; 48
	cli();
 734:	f8 94       	cli
	unsigned char rg = (MCUCR & ~(1 << BODSE)) | (1 << BODS);
 736:	85 b7       	in	r24, 0x35	; 53
 738:	8f 79       	andi	r24, 0x9F	; 159
 73a:	98 2f       	mov	r25, r24
 73c:	90 64       	ori	r25, 0x40	; 64
	MCUCR = rg | (1 << BODSE);
 73e:	80 66       	ori	r24, 0x60	; 96
 740:	85 bf       	out	0x35, r24	; 53
	MCUCR = rg;
 742:	95 bf       	out	0x35, r25	; 53
 744:	08 95       	ret

Disassembly of section .text.init_first_timing:

00000746 <init_first_timing>:


}
void init_first_timing(void)
{
	TCCR0B = 0;
 746:	15 bc       	out	0x25, r1	; 37
	TCCR0B = (1<<CS01);
 748:	82 e0       	ldi	r24, 0x02	; 2
 74a:	85 bd       	out	0x25, r24	; 37
	TCCR1B = (1<<CS11);
 74c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	TCNT0 = 0;
 750:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0;
 752:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 756:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	TCCR2B = 0;
 75a:	e1 eb       	ldi	r30, 0xB1	; 177
 75c:	f0 e0       	ldi	r31, 0x00	; 0
 75e:	10 82       	st	Z, r1
	TCCR2B = (1<<CS21);
 760:	80 83       	st	Z, r24
	TCNT2 = 0;
 762:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 766:	08 95       	ret

Disassembly of section .text.check_button:

0000060e <check_button>:
}
uint8_t check_button(uint16_t* button_counter,bool *check_if_button_is_pressed)
{
 60e:	fc 01       	movw	r30, r24
		if(!(PIND & (1<<PD2)))
 610:	4a 99       	sbic	0x09, 2	; 9
 612:	0b c0       	rjmp	.+22     	; 0x62a <check_button+0x1c>
		{
			
			(*check_if_button_is_pressed) = false;
 614:	db 01       	movw	r26, r22
 616:	1c 92       	st	X, r1
			(*button_counter)++;
 618:	80 81       	ld	r24, Z
 61a:	91 81       	ldd	r25, Z+1	; 0x01
 61c:	01 96       	adiw	r24, 0x01	; 1
 61e:	91 83       	std	Z+1, r25	; 0x01
 620:	80 83       	st	Z, r24
			TCNT1 = 0;
 622:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 626:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
			
		}
	if((PIND & (1<<PD2)))
 62a:	4a 9b       	sbis	0x09, 2	; 9
 62c:	0a c0       	rjmp	.+20     	; 0x642 <check_button+0x34>
	{
		if(((*button_counter) > 1)  && ((*button_counter) < 65500))
 62e:	80 81       	ld	r24, Z
 630:	91 81       	ldd	r25, Z+1	; 0x01
 632:	02 97       	sbiw	r24, 0x02	; 2
 634:	8a 3d       	cpi	r24, 0xDA	; 218
 636:	9f 4f       	sbci	r25, 0xFF	; 255
 638:	20 f4       	brcc	.+8      	; 0x642 <check_button+0x34>
		{
			(*button_counter) = 0;
 63a:	11 82       	std	Z+1, r1	; 0x01
 63c:	10 82       	st	Z, r1
			return 1;
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	08 95       	ret
		}
	}
	if((*button_counter)>=65500)
 642:	80 81       	ld	r24, Z
 644:	91 81       	ldd	r25, Z+1	; 0x01
 646:	8c 3d       	cpi	r24, 0xDC	; 220
 648:	9f 4f       	sbci	r25, 0xFF	; 255
 64a:	20 f0       	brcs	.+8      	; 0x654 <check_button+0x46>
	{
		(*button_counter) = 0;
 64c:	11 82       	std	Z+1, r1	; 0x01
 64e:	10 82       	st	Z, r1
		//Transmit_UART_TTL(97);
		return 2;
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	08 95       	ret
	}
	return 0;
 654:	80 e0       	ldi	r24, 0x00	; 0
}
 656:	08 95       	ret

Disassembly of section .text.main:

00000080 <main>:
int main()
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <main+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x8>
  88:	0f 92       	push	r0
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
	init_function();
  8e:	0e 94 88 03 	call	0x710	; 0x710 <init_function>
	init_first_timing();
  92:	0e 94 a3 03 	call	0x746	; 0x746 <init_first_timing>
	UART_TTL();
  96:	0e 94 b4 03 	call	0x768	; 0x768 <UART_TTL>
	uint8_t controler = 0;
	uint16_t button_counter = 0;
  9a:	1a 82       	std	Y+2, r1	; 0x02
  9c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t result1 = 1;
	uint8_t result2 = 0;
	uint8_t minutes_units = 0;
	uint8_t minutes_tenths = 0;	
  9e:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t hours_units = 0;
	uint8_t hours_tenths = 0;
  a0:	1c 82       	std	Y+4, r1	; 0x04
	bool check_if_button_is_pressed = false;
  a2:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t button_counter = 0;
	uint8_t result1 = 1;
	uint8_t result2 = 0;
	uint8_t minutes_units = 0;
	uint8_t minutes_tenths = 0;	
	uint8_t hours_units = 0;
  a4:	e1 2c       	mov	r14, r1
	UART_TTL();
	uint8_t controler = 0;
	uint16_t button_counter = 0;
	uint8_t result1 = 1;
	uint8_t result2 = 0;
	uint8_t minutes_units = 0;
  a6:	f1 2c       	mov	r15, r1
	init_function();
	init_first_timing();
	UART_TTL();
	uint8_t controler = 0;
	uint16_t button_counter = 0;
	uint8_t result1 = 1;
  a8:	01 e0       	ldi	r16, 0x01	; 1
int main()
{
	init_function();
	init_first_timing();
	UART_TTL();
	uint8_t controler = 0;
  aa:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t hours_tenths = 0;
	bool check_if_button_is_pressed = false;
	while(1)
	{
		
		switch(controler)
  ac:	11 30       	cpi	r17, 0x01	; 1
  ae:	81 f0       	breq	.+32     	; 0xd0 <main+0x50>
  b0:	38 f0       	brcs	.+14     	; 0xc0 <main+0x40>
  b2:	12 30       	cpi	r17, 0x02	; 2
  b4:	09 f4       	brne	.+2      	; 0xb8 <main+0x38>
  b6:	5b c0       	rjmp	.+182    	; 0x16e <main+0xee>
  b8:	13 30       	cpi	r17, 0x03	; 3
  ba:	09 f4       	brne	.+2      	; 0xbe <main+0x3e>
  bc:	6d c0       	rjmp	.+218    	; 0x198 <main+0x118>
  be:	f6 cf       	rjmp	.-20     	; 0xac <main+0x2c>
		{
			case 0: { Start(); 
  c0:	0e 94 11 01 	call	0x222	; 0x222 <Start>
				controler = 1; 
				run_minutes();  
  c4:	0e 94 4d 03 	call	0x69a	; 0x69a <run_minutes>
				LED_OFF();
  c8:	0e 94 df 02 	call	0x5be	; 0x5be <LED_OFF>
	{
		
		switch(controler)
		{
			case 0: { Start(); 
				controler = 1; 
  cc:	11 e0       	ldi	r17, 0x01	; 1
				run_minutes();  
				LED_OFF();
				} break;
  ce:	ee cf       	rjmp	.-36     	; 0xac <main+0x2c>
			case 1:
			{
				result2 = check_button(&button_counter,&check_if_button_is_pressed);
  d0:	be 01       	movw	r22, r28
  d2:	6b 5f       	subi	r22, 0xFB	; 251
  d4:	7f 4f       	sbci	r23, 0xFF	; 255
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	0e 94 07 03 	call	0x60e	; 0x60e <check_button>
  de:	d8 2e       	mov	r13, r24
				if(result2 == 2)
  e0:	22 e0       	ldi	r18, 0x02	; 2
  e2:	82 13       	cpse	r24, r18
  e4:	0a c0       	rjmp	.+20     	; 0xfa <main+0x7a>
				{
					result1++;
  e6:	0f 5f       	subi	r16, 0xFF	; 255
					if(result1 == 2)
  e8:	02 30       	cpi	r16, 0x02	; 2
  ea:	21 f4       	brne	.+8      	; 0xf4 <main+0x74>
					{
						run_hours();	
  ec:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <run_hours>
						LED_OFF();	
  f0:	0e 94 df 02 	call	0x5be	; 0x5be <LED_OFF>
					}
					if(result1 == 3)
  f4:	03 30       	cpi	r16, 0x03	; 3
  f6:	09 f4       	brne	.+2      	; 0xfa <main+0x7a>
					{
						
						controler = 2;
  f8:	12 e0       	ldi	r17, 0x02	; 2
					}
				}
				if(result1 == 1)
  fa:	01 30       	cpi	r16, 0x01	; 1
  fc:	81 f4       	brne	.+32     	; 0x11e <main+0x9e>
				{
					if(result2 == 1)
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	d8 12       	cpse	r13, r24
 102:	0d c0       	rjmp	.+26     	; 0x11e <main+0x9e>
					{
						minutes_units++;
 104:	f3 94       	inc	r15
						if(minutes_units>9)
 106:	99 e0       	ldi	r25, 0x09	; 9
 108:	9f 15       	cp	r25, r15
 10a:	48 f4       	brcc	.+18     	; 0x11e <main+0x9e>
						{
							minutes_units = 0;
							minutes_tenths++;
 10c:	8b 81       	ldd	r24, Y+3	; 0x03
 10e:	8f 5f       	subi	r24, 0xFF	; 255
 110:	8b 83       	std	Y+3, r24	; 0x03
							if(minutes_tenths>5)
 112:	86 30       	cpi	r24, 0x06	; 6
 114:	18 f0       	brcs	.+6      	; 0x11c <main+0x9c>
							{
								minutes_tenths = 0;
 116:	1b 82       	std	Y+3, r1	; 0x03
					if(result2 == 1)
					{
						minutes_units++;
						if(minutes_units>9)
						{
							minutes_units = 0;
 118:	f1 2c       	mov	r15, r1
 11a:	01 c0       	rjmp	.+2      	; 0x11e <main+0x9e>
 11c:	f1 2c       	mov	r15, r1
								minutes_tenths = 0;
							}
						}
					}
				}
				if(result1 == 2)
 11e:	02 30       	cpi	r16, 0x02	; 2
 120:	e9 f4       	brne	.+58     	; 0x15c <main+0xdc>
				{
					if(result2 == 1)
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	d2 12       	cpse	r13, r18
 126:	1a c0       	rjmp	.+52     	; 0x15c <main+0xdc>
					{
						hours_units++;
 128:	e3 94       	inc	r14
						if(hours_units>9)
 12a:	89 e0       	ldi	r24, 0x09	; 9
 12c:	8e 15       	cp	r24, r14
 12e:	48 f4       	brcc	.+18     	; 0x142 <main+0xc2>
						{
							hours_units = 0;
							hours_tenths++;
 130:	8c 81       	ldd	r24, Y+4	; 0x04
 132:	8f 5f       	subi	r24, 0xFF	; 255
 134:	8c 83       	std	Y+4, r24	; 0x04
							if(hours_tenths>2)
 136:	83 30       	cpi	r24, 0x03	; 3
 138:	18 f0       	brcs	.+6      	; 0x140 <main+0xc0>
							{
								hours_tenths = 0;
 13a:	1c 82       	std	Y+4, r1	; 0x04
								hours_units = 0;
 13c:	e1 2c       	mov	r14, r1
 13e:	01 c0       	rjmp	.+2      	; 0x142 <main+0xc2>
					if(result2 == 1)
					{
						hours_units++;
						if(hours_units>9)
						{
							hours_units = 0;
 140:	e1 2c       	mov	r14, r1
							{
								hours_tenths = 0;
								hours_units = 0;
							}	
						}
						if(hours_tenths>=2 && hours_units>3)
 142:	8c 81       	ldd	r24, Y+4	; 0x04
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	50 f0       	brcs	.+20     	; 0x15c <main+0xdc>
 148:	93 e0       	ldi	r25, 0x03	; 3
 14a:	9e 15       	cp	r25, r14
 14c:	38 f4       	brcc	.+14     	; 0x15c <main+0xdc>
							{
								Transmit_UART_TTL(hours_tenths);
 14e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Transmit_UART_TTL>
								Transmit_UART_TTL(hours_units);
 152:	8e 2d       	mov	r24, r14
 154:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <Transmit_UART_TTL>
								hours_tenths = 0;
 158:	1c 82       	std	Y+4, r1	; 0x04
								hours_units = 0;
 15a:	e1 2c       	mov	r14, r1
								
							}
					}
				}
				set_minutes(minutes_units,minutes_tenths);
 15c:	6b 81       	ldd	r22, Y+3	; 0x03
 15e:	8f 2d       	mov	r24, r15
 160:	0e 94 d5 01 	call	0x3aa	; 0x3aa <set_minutes>
				set_hours(hours_units,hours_tenths);
 164:	6c 81       	ldd	r22, Y+4	; 0x04
 166:	8e 2d       	mov	r24, r14
 168:	0e 94 46 02 	call	0x48c	; 0x48c <set_hours>
				result2 = 0;
			} break;
 16c:	9f cf       	rjmp	.-194    	; 0xac <main+0x2c>
			case 2:
			{	
				LED_OFF();	
 16e:	0e 94 df 02 	call	0x5be	; 0x5be <LED_OFF>
				init_watch(minutes_units,minutes_tenths,hours_units,hours_tenths);
 172:	2c 81       	ldd	r18, Y+4	; 0x04
 174:	4e 2d       	mov	r20, r14
 176:	6b 81       	ldd	r22, Y+3	; 0x03
 178:	8f 2d       	mov	r24, r15
 17a:	0e 94 ac 02 	call	0x558	; 0x558 <init_watch>
				button_counter = 0;
 17e:	1a 82       	std	Y+2, r1	; 0x02
 180:	19 82       	std	Y+1, r1	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	89 e6       	ldi	r24, 0x69	; 105
 186:	98 e1       	ldi	r25, 0x18	; 24
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x108>
 190:	00 c0       	rjmp	.+0      	; 0x192 <main+0x112>
 192:	00 00       	nop
				controler = 3;
 194:	13 e0       	ldi	r17, 0x03	; 3
 196:	8a cf       	rjmp	.-236    	; 0xac <main+0x2c>
				_delay_ms(1000);
			}break;
			case 3: {
				if(button_counter == 0)
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	9a 81       	ldd	r25, Y+2	; 0x02
 19c:	89 2b       	or	r24, r25
 19e:	59 f5       	brne	.+86     	; 0x1f6 <main+0x176>
				{
					EICRA |= (1<<ISC01); 
 1a0:	e9 e6       	ldi	r30, 0x69	; 105
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	80 81       	ld	r24, Z
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	80 83       	st	Z, r24
					EIMSK |= (1<<INT0); 
 1aa:	8d b3       	in	r24, 0x1d	; 29
 1ac:	81 60       	ori	r24, 0x01	; 1
 1ae:	8d bb       	out	0x1d, r24	; 29
					sei();
 1b0:	78 94       	sei
					set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	81 7f       	andi	r24, 0xF1	; 241
 1b6:	86 60       	ori	r24, 0x06	; 6
 1b8:	83 bf       	out	0x33, r24	; 51
					sleep_enable();
 1ba:	83 b7       	in	r24, 0x33	; 51
 1bc:	81 60       	ori	r24, 0x01	; 1
 1be:	83 bf       	out	0x33, r24	; 51
					sleep_cpu();
 1c0:	88 95       	sleep
					sleep_disable();
 1c2:	83 b7       	in	r24, 0x33	; 51
 1c4:	8e 7f       	andi	r24, 0xFE	; 254
 1c6:	83 bf       	out	0x33, r24	; 51
					init_I2C();
 1c8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <init_I2C>
					get_current_time(&hours_tenths,&minutes_tenths);
 1cc:	be 01       	movw	r22, r28
 1ce:	6d 5f       	subi	r22, 0xFD	; 253
 1d0:	7f 4f       	sbci	r23, 0xFF	; 255
 1d2:	ce 01       	movw	r24, r28
 1d4:	04 96       	adiw	r24, 0x04	; 4
 1d6:	0e 94 2c 03 	call	0x658	; 0x658 <get_current_time>
					minutes_units = 0b00001111 & minutes_tenths;
 1da:	8b 81       	ldd	r24, Y+3	; 0x03
 1dc:	28 2f       	mov	r18, r24
 1de:	2f 70       	andi	r18, 0x0F	; 15
 1e0:	f2 2e       	mov	r15, r18
					minutes_tenths&= 0b11110000;
					minutes_tenths = minutes_tenths >> 4;
 1e2:	82 95       	swap	r24
 1e4:	8f 70       	andi	r24, 0x0F	; 15
 1e6:	8b 83       	std	Y+3, r24	; 0x03
					hours_units = 0b00001111 & hours_tenths;
 1e8:	8c 81       	ldd	r24, Y+4	; 0x04
 1ea:	98 2f       	mov	r25, r24
 1ec:	9f 70       	andi	r25, 0x0F	; 15
 1ee:	e9 2e       	mov	r14, r25
					hours_tenths &= 0b11110000;
					hours_tenths = hours_tenths>>4;
 1f0:	82 95       	swap	r24
 1f2:	8f 70       	andi	r24, 0x0F	; 15
 1f4:	8c 83       	std	Y+4, r24	; 0x04
				}
					set_minutes(minutes_units,minutes_tenths);
 1f6:	6b 81       	ldd	r22, Y+3	; 0x03
 1f8:	8f 2d       	mov	r24, r15
 1fa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <set_minutes>
					set_hours(hours_units,hours_tenths);
 1fe:	6c 81       	ldd	r22, Y+4	; 0x04
 200:	8e 2d       	mov	r24, r14
 202:	0e 94 46 02 	call	0x48c	; 0x48c <set_hours>
					button_counter++;
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	9a 81       	ldd	r25, Y+2	; 0x02
 20a:	01 96       	adiw	r24, 0x01	; 1
 20c:	9a 83       	std	Y+2, r25	; 0x02
 20e:	89 83       	std	Y+1, r24	; 0x01
					if(button_counter>=65500)
 210:	8c 3d       	cpi	r24, 0xDC	; 220
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	08 f4       	brcc	.+2      	; 0x218 <main+0x198>
 216:	4a cf       	rjmp	.-364    	; 0xac <main+0x2c>
					{
						LED_OFF();
 218:	0e 94 df 02 	call	0x5be	; 0x5be <LED_OFF>
						button_counter=0;
 21c:	1a 82       	std	Y+2, r1	; 0x02
 21e:	19 82       	std	Y+1, r1	; 0x01
 220:	45 cf       	rjmp	.-374    	; 0xac <main+0x2c>

Disassembly of section .text.__vector_1:

000007be <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 7be:	1f 92       	push	r1
 7c0:	0f 92       	push	r0
 7c2:	0f b6       	in	r0, 0x3f	; 63
 7c4:	0f 92       	push	r0
 7c6:	11 24       	eor	r1, r1
 7c8:	0f 90       	pop	r0
 7ca:	0f be       	out	0x3f, r0	; 63
 7cc:	0f 90       	pop	r0
 7ce:	1f 90       	pop	r1
 7d0:	18 95       	reti

Disassembly of section .text.UART_TTL:

00000768 <UART_TTL>:
#include "UART_TTL.h"
void UART_TTL()
{
	UCSR0B = 0;
 768:	e1 ec       	ldi	r30, 0xC1	; 193
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 76e:	80 81       	ld	r24, Z
 770:	88 61       	ori	r24, 0x18	; 24
 772:	80 83       	st	Z, r24
	//UCSR0B |= (1<<RXC0);
	//UCSR0B |= (1<<TXC0);
	//sei();
	UBRR0L = BAUD_PRESCALE;
 774:	83 e3       	ldi	r24, 0x33	; 51
 776:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (BAUD_PRESCALE >> 8);
 77a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 77e:	08 95       	ret

Disassembly of section .text.Transmit_UART_TTL:

000007f2 <Transmit_UART_TTL>:
}
void Transmit_UART_TTL(uint8_t data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 7f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 7f6:	95 ff       	sbrs	r25, 5
 7f8:	fc cf       	rjmp	.-8      	; 0x7f2 <Transmit_UART_TTL>
	UDR0 = data;
 7fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 7fe:	08 95       	ret

Disassembly of section .text.get_current_time:

00000658 <get_current_time>:

#include "Watch.h"
void get_current_time(uint8_t* hours,uint8_t* minutes)
{
 658:	0f 93       	push	r16
 65a:	1f 93       	push	r17
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	ec 01       	movw	r28, r24
 662:	8b 01       	movw	r16, r22
	Start_I2C();
 664:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Start_I2C>
	Send_I2C(0b11010000);
 668:	80 ed       	ldi	r24, 0xD0	; 208
 66a:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(0);
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	
	//Transmit_UART_TTL('a');
	Start_I2C();
 674:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Start_I2C>
	Send_I2C(0b11010001);
 678:	81 ed       	ldi	r24, 0xD1	; 209
 67a:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Read_I2C();
 67e:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Read_I2C>
	(*minutes)=Read_I2C();
 682:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Read_I2C>
 686:	f8 01       	movw	r30, r16
 688:	80 83       	st	Z, r24
	(*hours) = Read_I2C();
 68a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Read_I2C>
 68e:	88 83       	st	Y, r24
}
 690:	df 91       	pop	r29
 692:	cf 91       	pop	r28
 694:	1f 91       	pop	r17
 696:	0f 91       	pop	r16
 698:	08 95       	ret

Disassembly of section .text.run_minutes:

0000069a <run_minutes>:
void run_minutes()
{
	ONLED7();
 69a:	88 b1       	in	r24, 0x08	; 8
 69c:	88 60       	ori	r24, 0x08	; 8
 69e:	88 b9       	out	0x08, r24	; 8
	ONLED8();
 6a0:	88 b1       	in	r24, 0x08	; 8
 6a2:	84 60       	ori	r24, 0x04	; 4
 6a4:	88 b9       	out	0x08, r24	; 8
	ONLED9();
 6a6:	88 b1       	in	r24, 0x08	; 8
 6a8:	82 60       	ori	r24, 0x02	; 2
 6aa:	88 b9       	out	0x08, r24	; 8
	ONLED10();
 6ac:	88 b1       	in	r24, 0x08	; 8
 6ae:	81 60       	ori	r24, 0x01	; 1
 6b0:	88 b9       	out	0x08, r24	; 8
	ONLED11();
 6b2:	85 b1       	in	r24, 0x05	; 5
 6b4:	80 62       	ori	r24, 0x20	; 32
 6b6:	85 b9       	out	0x05, r24	; 5
	ONLED12();
 6b8:	85 b1       	in	r24, 0x05	; 5
 6ba:	80 61       	ori	r24, 0x10	; 16
 6bc:	85 b9       	out	0x05, r24	; 5
	ONLED13();
 6be:	85 b1       	in	r24, 0x05	; 5
 6c0:	88 60       	ori	r24, 0x08	; 8
 6c2:	85 b9       	out	0x05, r24	; 5
 6c4:	2f ef       	ldi	r18, 0xFF	; 255
 6c6:	84 e3       	ldi	r24, 0x34	; 52
 6c8:	9c e0       	ldi	r25, 0x0C	; 12
 6ca:	21 50       	subi	r18, 0x01	; 1
 6cc:	80 40       	sbci	r24, 0x00	; 0
 6ce:	90 40       	sbci	r25, 0x00	; 0
 6d0:	e1 f7       	brne	.-8      	; 0x6ca <run_minutes+0x30>
 6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <run_minutes+0x3a>
 6d4:	00 00       	nop
 6d6:	08 95       	ret

Disassembly of section .text.run_hours:

000006d8 <run_hours>:
	_delay_ms(500);
}
void run_hours()
{
	ONLED1();
 6d8:	8b b1       	in	r24, 0x0b	; 11
 6da:	80 62       	ori	r24, 0x20	; 32
 6dc:	8b b9       	out	0x0b, r24	; 11
	ONLED2();
 6de:	8b b1       	in	r24, 0x0b	; 11
 6e0:	80 64       	ori	r24, 0x40	; 64
 6e2:	8b b9       	out	0x0b, r24	; 11
	ONLED3();
 6e4:	8b b1       	in	r24, 0x0b	; 11
 6e6:	80 68       	ori	r24, 0x80	; 128
 6e8:	8b b9       	out	0x0b, r24	; 11
	ONLED4();
 6ea:	85 b1       	in	r24, 0x05	; 5
 6ec:	81 60       	ori	r24, 0x01	; 1
 6ee:	85 b9       	out	0x05, r24	; 5
	ONLED5();
 6f0:	8b b1       	in	r24, 0x0b	; 11
 6f2:	88 60       	ori	r24, 0x08	; 8
 6f4:	8b b9       	out	0x0b, r24	; 11
	ONLED6();
 6f6:	8b b1       	in	r24, 0x0b	; 11
 6f8:	80 61       	ori	r24, 0x10	; 16
 6fa:	8b b9       	out	0x0b, r24	; 11
 6fc:	2f ef       	ldi	r18, 0xFF	; 255
 6fe:	84 e3       	ldi	r24, 0x34	; 52
 700:	9c e0       	ldi	r25, 0x0C	; 12
 702:	21 50       	subi	r18, 0x01	; 1
 704:	80 40       	sbci	r24, 0x00	; 0
 706:	90 40       	sbci	r25, 0x00	; 0
 708:	e1 f7       	brne	.-8      	; 0x702 <run_hours+0x2a>
 70a:	00 c0       	rjmp	.+0      	; 0x70c <run_hours+0x34>
 70c:	00 00       	nop
 70e:	08 95       	ret

Disassembly of section .text.init_watch:

00000558 <init_watch>:
	_delay_ms(500);
}
void init_watch(uint8_t minutes_units,uint8_t minutes_tenths,uint8_t hours_units,uint8_t hours_tenths)
{
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	df 93       	push	r29
 560:	d8 2f       	mov	r29, r24
 562:	16 2f       	mov	r17, r22
 564:	c4 2f       	mov	r28, r20
 566:	02 2f       	mov	r16, r18
	init_I2C();
 568:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <init_I2C>
	//UART_TTL();
	Start_I2C();
 56c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <Start_I2C>
	uint8_t hours = hours_tenths<<4;
	hours += hours_units;
 570:	80 e1       	ldi	r24, 0x10	; 16
 572:	08 9f       	mul	r16, r24
 574:	c0 0d       	add	r28, r0
 576:	11 24       	eor	r1, r1
	uint8_t minutes = minutes_tenths<<4;
	minutes+=minutes_units;
 578:	80 e1       	ldi	r24, 0x10	; 16
 57a:	18 9f       	mul	r17, r24
 57c:	d0 0d       	add	r29, r0
 57e:	11 24       	eor	r1, r1
	Send_I2C(0b11010000);
 580:	80 ed       	ldi	r24, 0xD0	; 208
 582:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(0);
 586:	80 e0       	ldi	r24, 0x00	; 0
 588:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(0);
 58c:	80 e0       	ldi	r24, 0x00	; 0
 58e:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(minutes);
 592:	8d 2f       	mov	r24, r29
 594:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(hours);
 598:	8c 2f       	mov	r24, r28
 59a:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(0x04);
 59e:	84 e0       	ldi	r24, 0x04	; 4
 5a0:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(0x05);
 5a4:	85 e0       	ldi	r24, 0x05	; 5
 5a6:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Send_I2C(0x06);
 5aa:	86 e0       	ldi	r24, 0x06	; 6
 5ac:	0e 94 cb 03 	call	0x796	; 0x796 <Send_I2C>
	Stop_I2C();
 5b0:	0e 94 00 04 	call	0x800	; 0x800 <__DATA_REGION_LENGTH__>

}
 5b4:	df 91       	pop	r29
 5b6:	cf 91       	pop	r28
 5b8:	1f 91       	pop	r17
 5ba:	0f 91       	pop	r16
 5bc:	08 95       	ret

Disassembly of section .text.LED_OFF:

000005be <LED_OFF>:

void LED_OFF()
{
	OFFLED1();
 5be:	8b b1       	in	r24, 0x0b	; 11
 5c0:	8f 7d       	andi	r24, 0xDF	; 223
 5c2:	8b b9       	out	0x0b, r24	; 11
	OFFLED2();
 5c4:	8b b1       	in	r24, 0x0b	; 11
 5c6:	8f 7b       	andi	r24, 0xBF	; 191
 5c8:	8b b9       	out	0x0b, r24	; 11
	OFFLED3();
 5ca:	8b b1       	in	r24, 0x0b	; 11
 5cc:	8f 77       	andi	r24, 0x7F	; 127
 5ce:	8b b9       	out	0x0b, r24	; 11
	OFFLED4();
 5d0:	85 b1       	in	r24, 0x05	; 5
 5d2:	8e 7f       	andi	r24, 0xFE	; 254
 5d4:	85 b9       	out	0x05, r24	; 5
	OFFLED5();
 5d6:	8b b1       	in	r24, 0x0b	; 11
 5d8:	87 7f       	andi	r24, 0xF7	; 247
 5da:	8b b9       	out	0x0b, r24	; 11
	OFFLED6();
 5dc:	8b b1       	in	r24, 0x0b	; 11
 5de:	8f 7e       	andi	r24, 0xEF	; 239
 5e0:	8b b9       	out	0x0b, r24	; 11
	OFFLED7();
 5e2:	88 b1       	in	r24, 0x08	; 8
 5e4:	87 7f       	andi	r24, 0xF7	; 247
 5e6:	88 b9       	out	0x08, r24	; 8
	OFFLED8();
 5e8:	88 b1       	in	r24, 0x08	; 8
 5ea:	8b 7f       	andi	r24, 0xFB	; 251
 5ec:	88 b9       	out	0x08, r24	; 8
	OFFLED9();
 5ee:	88 b1       	in	r24, 0x08	; 8
 5f0:	8d 7f       	andi	r24, 0xFD	; 253
 5f2:	88 b9       	out	0x08, r24	; 8
	OFFLED10();
 5f4:	88 b1       	in	r24, 0x08	; 8
 5f6:	8e 7f       	andi	r24, 0xFE	; 254
 5f8:	88 b9       	out	0x08, r24	; 8
	OFFLED11();
 5fa:	85 b1       	in	r24, 0x05	; 5
 5fc:	8f 7d       	andi	r24, 0xDF	; 223
 5fe:	85 b9       	out	0x05, r24	; 5
	OFFLED12();
 600:	85 b1       	in	r24, 0x05	; 5
 602:	8f 7e       	andi	r24, 0xEF	; 239
 604:	85 b9       	out	0x05, r24	; 5
	OFFLED13();
 606:	85 b1       	in	r24, 0x05	; 5
 608:	87 7f       	andi	r24, 0xF7	; 247
 60a:	85 b9       	out	0x05, r24	; 5
 60c:	08 95       	ret

Disassembly of section .text.Start:

00000222 <Start>:
}
void Start()
{
		ONLED1();
 222:	8b b1       	in	r24, 0x0b	; 11
 224:	80 62       	ori	r24, 0x20	; 32
 226:	8b b9       	out	0x0b, r24	; 11
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	84 e3       	ldi	r24, 0x34	; 52
 22c:	9c e0       	ldi	r25, 0x0C	; 12
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <Start+0xc>
 236:	00 c0       	rjmp	.+0      	; 0x238 <Start+0x16>
 238:	00 00       	nop
		_delay_ms(500);
		OFFLED1();
 23a:	8b b1       	in	r24, 0x0b	; 11
 23c:	8f 7d       	andi	r24, 0xDF	; 223
 23e:	8b b9       	out	0x0b, r24	; 11
		ONLED2();
 240:	8b b1       	in	r24, 0x0b	; 11
 242:	80 64       	ori	r24, 0x40	; 64
 244:	8b b9       	out	0x0b, r24	; 11
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	84 e3       	ldi	r24, 0x34	; 52
 24a:	9c e0       	ldi	r25, 0x0C	; 12
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <Start+0x2a>
 254:	00 c0       	rjmp	.+0      	; 0x256 <Start+0x34>
 256:	00 00       	nop
		_delay_ms(500);
		OFFLED2();
 258:	8b b1       	in	r24, 0x0b	; 11
 25a:	8f 7b       	andi	r24, 0xBF	; 191
 25c:	8b b9       	out	0x0b, r24	; 11
		ONLED3();
 25e:	8b b1       	in	r24, 0x0b	; 11
 260:	80 68       	ori	r24, 0x80	; 128
 262:	8b b9       	out	0x0b, r24	; 11
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	84 e3       	ldi	r24, 0x34	; 52
 268:	9c e0       	ldi	r25, 0x0C	; 12
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <Start+0x48>
 272:	00 c0       	rjmp	.+0      	; 0x274 <Start+0x52>
 274:	00 00       	nop
		_delay_ms(500);
		OFFLED3();
 276:	8b b1       	in	r24, 0x0b	; 11
 278:	8f 77       	andi	r24, 0x7F	; 127
 27a:	8b b9       	out	0x0b, r24	; 11
		ONLED4();
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	81 60       	ori	r24, 0x01	; 1
 280:	85 b9       	out	0x05, r24	; 5
 282:	2f ef       	ldi	r18, 0xFF	; 255
 284:	84 e3       	ldi	r24, 0x34	; 52
 286:	9c e0       	ldi	r25, 0x0C	; 12
 288:	21 50       	subi	r18, 0x01	; 1
 28a:	80 40       	sbci	r24, 0x00	; 0
 28c:	90 40       	sbci	r25, 0x00	; 0
 28e:	e1 f7       	brne	.-8      	; 0x288 <Start+0x66>
 290:	00 c0       	rjmp	.+0      	; 0x292 <Start+0x70>
 292:	00 00       	nop
		_delay_ms(500);
		OFFLED4();
 294:	85 b1       	in	r24, 0x05	; 5
 296:	8e 7f       	andi	r24, 0xFE	; 254
 298:	85 b9       	out	0x05, r24	; 5
		ONLED5();
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	88 60       	ori	r24, 0x08	; 8
 29e:	8b b9       	out	0x0b, r24	; 11
 2a0:	2f ef       	ldi	r18, 0xFF	; 255
 2a2:	84 e3       	ldi	r24, 0x34	; 52
 2a4:	9c e0       	ldi	r25, 0x0C	; 12
 2a6:	21 50       	subi	r18, 0x01	; 1
 2a8:	80 40       	sbci	r24, 0x00	; 0
 2aa:	90 40       	sbci	r25, 0x00	; 0
 2ac:	e1 f7       	brne	.-8      	; 0x2a6 <Start+0x84>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <Start+0x8e>
 2b0:	00 00       	nop
		_delay_ms(500);
		OFFLED5();
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	87 7f       	andi	r24, 0xF7	; 247
 2b6:	8b b9       	out	0x0b, r24	; 11
		ONLED6();
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	80 61       	ori	r24, 0x10	; 16
 2bc:	8b b9       	out	0x0b, r24	; 11
 2be:	2f ef       	ldi	r18, 0xFF	; 255
 2c0:	84 e3       	ldi	r24, 0x34	; 52
 2c2:	9c e0       	ldi	r25, 0x0C	; 12
 2c4:	21 50       	subi	r18, 0x01	; 1
 2c6:	80 40       	sbci	r24, 0x00	; 0
 2c8:	90 40       	sbci	r25, 0x00	; 0
 2ca:	e1 f7       	brne	.-8      	; 0x2c4 <Start+0xa2>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <Start+0xac>
 2ce:	00 00       	nop
		_delay_ms(500);
		OFFLED6();
 2d0:	8b b1       	in	r24, 0x0b	; 11
 2d2:	8f 7e       	andi	r24, 0xEF	; 239
 2d4:	8b b9       	out	0x0b, r24	; 11
		ONLED7();
 2d6:	88 b1       	in	r24, 0x08	; 8
 2d8:	88 60       	ori	r24, 0x08	; 8
 2da:	88 b9       	out	0x08, r24	; 8
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	84 e3       	ldi	r24, 0x34	; 52
 2e0:	9c e0       	ldi	r25, 0x0C	; 12
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <Start+0xc0>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <Start+0xca>
 2ec:	00 00       	nop
		_delay_ms(500);
		OFFLED7();
 2ee:	88 b1       	in	r24, 0x08	; 8
 2f0:	87 7f       	andi	r24, 0xF7	; 247
 2f2:	88 b9       	out	0x08, r24	; 8
		ONLED8();
 2f4:	88 b1       	in	r24, 0x08	; 8
 2f6:	84 60       	ori	r24, 0x04	; 4
 2f8:	88 b9       	out	0x08, r24	; 8
 2fa:	2f ef       	ldi	r18, 0xFF	; 255
 2fc:	84 e3       	ldi	r24, 0x34	; 52
 2fe:	9c e0       	ldi	r25, 0x0C	; 12
 300:	21 50       	subi	r18, 0x01	; 1
 302:	80 40       	sbci	r24, 0x00	; 0
 304:	90 40       	sbci	r25, 0x00	; 0
 306:	e1 f7       	brne	.-8      	; 0x300 <Start+0xde>
 308:	00 c0       	rjmp	.+0      	; 0x30a <Start+0xe8>
 30a:	00 00       	nop
		_delay_ms(500);
		OFFLED8();
 30c:	88 b1       	in	r24, 0x08	; 8
 30e:	8b 7f       	andi	r24, 0xFB	; 251
 310:	88 b9       	out	0x08, r24	; 8
		ONLED9();
 312:	88 b1       	in	r24, 0x08	; 8
 314:	82 60       	ori	r24, 0x02	; 2
 316:	88 b9       	out	0x08, r24	; 8
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	84 e3       	ldi	r24, 0x34	; 52
 31c:	9c e0       	ldi	r25, 0x0C	; 12
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <Start+0xfc>
 326:	00 c0       	rjmp	.+0      	; 0x328 <Start+0x106>
 328:	00 00       	nop
		_delay_ms(500);
		OFFLED9();
 32a:	88 b1       	in	r24, 0x08	; 8
 32c:	8d 7f       	andi	r24, 0xFD	; 253
 32e:	88 b9       	out	0x08, r24	; 8
		ONLED10();
 330:	88 b1       	in	r24, 0x08	; 8
 332:	81 60       	ori	r24, 0x01	; 1
 334:	88 b9       	out	0x08, r24	; 8
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	84 e3       	ldi	r24, 0x34	; 52
 33a:	9c e0       	ldi	r25, 0x0C	; 12
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <Start+0x11a>
 344:	00 c0       	rjmp	.+0      	; 0x346 <Start+0x124>
 346:	00 00       	nop
		_delay_ms(500);
		OFFLED10();
 348:	88 b1       	in	r24, 0x08	; 8
 34a:	8e 7f       	andi	r24, 0xFE	; 254
 34c:	88 b9       	out	0x08, r24	; 8
		ONLED11();
 34e:	85 b1       	in	r24, 0x05	; 5
 350:	80 62       	ori	r24, 0x20	; 32
 352:	85 b9       	out	0x05, r24	; 5
 354:	2f ef       	ldi	r18, 0xFF	; 255
 356:	84 e3       	ldi	r24, 0x34	; 52
 358:	9c e0       	ldi	r25, 0x0C	; 12
 35a:	21 50       	subi	r18, 0x01	; 1
 35c:	80 40       	sbci	r24, 0x00	; 0
 35e:	90 40       	sbci	r25, 0x00	; 0
 360:	e1 f7       	brne	.-8      	; 0x35a <Start+0x138>
 362:	00 c0       	rjmp	.+0      	; 0x364 <Start+0x142>
 364:	00 00       	nop
		_delay_ms(500);
		OFFLED11();
 366:	85 b1       	in	r24, 0x05	; 5
 368:	8f 7d       	andi	r24, 0xDF	; 223
 36a:	85 b9       	out	0x05, r24	; 5
		ONLED12();
 36c:	85 b1       	in	r24, 0x05	; 5
 36e:	80 61       	ori	r24, 0x10	; 16
 370:	85 b9       	out	0x05, r24	; 5
 372:	2f ef       	ldi	r18, 0xFF	; 255
 374:	84 e3       	ldi	r24, 0x34	; 52
 376:	9c e0       	ldi	r25, 0x0C	; 12
 378:	21 50       	subi	r18, 0x01	; 1
 37a:	80 40       	sbci	r24, 0x00	; 0
 37c:	90 40       	sbci	r25, 0x00	; 0
 37e:	e1 f7       	brne	.-8      	; 0x378 <Start+0x156>
 380:	00 c0       	rjmp	.+0      	; 0x382 <Start+0x160>
 382:	00 00       	nop
		_delay_ms(500);
		OFFLED12();
 384:	85 b1       	in	r24, 0x05	; 5
 386:	8f 7e       	andi	r24, 0xEF	; 239
 388:	85 b9       	out	0x05, r24	; 5
		ONLED13();
 38a:	85 b1       	in	r24, 0x05	; 5
 38c:	88 60       	ori	r24, 0x08	; 8
 38e:	85 b9       	out	0x05, r24	; 5
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	84 e3       	ldi	r24, 0x34	; 52
 394:	9c e0       	ldi	r25, 0x0C	; 12
 396:	21 50       	subi	r18, 0x01	; 1
 398:	80 40       	sbci	r24, 0x00	; 0
 39a:	90 40       	sbci	r25, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <Start+0x174>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <Start+0x17e>
 3a0:	00 00       	nop
		_delay_ms(500);
		OFFLED13();
 3a2:	85 b1       	in	r24, 0x05	; 5
 3a4:	87 7f       	andi	r24, 0xF7	; 247
 3a6:	85 b9       	out	0x05, r24	; 5
 3a8:	08 95       	ret

Disassembly of section .text.set_minutes:

000003aa <set_minutes>:
}

void set_minutes(uint8_t minutes_units,uint8_t minutes_tenths)
{	
		if(minutes_units & (1<<0))
 3aa:	80 ff       	sbrs	r24, 0
 3ac:	0b c0       	rjmp	.+22     	; 0x3c4 <set_minutes+0x1a>
		{
			if(100>TCNT0)
 3ae:	96 b5       	in	r25, 0x26	; 38
 3b0:	94 36       	cpi	r25, 0x64	; 100
 3b2:	20 f4       	brcc	.+8      	; 0x3bc <set_minutes+0x12>
			{
				ONLED10();
 3b4:	98 b1       	in	r25, 0x08	; 8
 3b6:	91 60       	ori	r25, 0x01	; 1
 3b8:	98 b9       	out	0x08, r25	; 8
 3ba:	07 c0       	rjmp	.+14     	; 0x3ca <set_minutes+0x20>
			}
			else
			{
				OFFLED10();
 3bc:	98 b1       	in	r25, 0x08	; 8
 3be:	9e 7f       	andi	r25, 0xFE	; 254
 3c0:	98 b9       	out	0x08, r25	; 8
 3c2:	03 c0       	rjmp	.+6      	; 0x3ca <set_minutes+0x20>
			}
		}
		else
		{
			OFFLED10();
 3c4:	98 b1       	in	r25, 0x08	; 8
 3c6:	9e 7f       	andi	r25, 0xFE	; 254
 3c8:	98 b9       	out	0x08, r25	; 8
		}
		if(minutes_units & (1<<1))
 3ca:	81 ff       	sbrs	r24, 1
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <set_minutes+0x3a>
		{
			if(100>TCNT0)
 3ce:	96 b5       	in	r25, 0x26	; 38
 3d0:	94 36       	cpi	r25, 0x64	; 100
 3d2:	20 f4       	brcc	.+8      	; 0x3dc <set_minutes+0x32>
			{
				ONLED11();			
 3d4:	95 b1       	in	r25, 0x05	; 5
 3d6:	90 62       	ori	r25, 0x20	; 32
 3d8:	95 b9       	out	0x05, r25	; 5
 3da:	07 c0       	rjmp	.+14     	; 0x3ea <set_minutes+0x40>
			}
			else
			{
				OFFLED11();
 3dc:	95 b1       	in	r25, 0x05	; 5
 3de:	9f 7d       	andi	r25, 0xDF	; 223
 3e0:	95 b9       	out	0x05, r25	; 5
 3e2:	03 c0       	rjmp	.+6      	; 0x3ea <set_minutes+0x40>
			}
		}
		else
		{
			OFFLED11();
 3e4:	95 b1       	in	r25, 0x05	; 5
 3e6:	9f 7d       	andi	r25, 0xDF	; 223
 3e8:	95 b9       	out	0x05, r25	; 5
		}
		if(minutes_units & (1<<2))
 3ea:	82 ff       	sbrs	r24, 2
 3ec:	0b c0       	rjmp	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			if(100>TCNT0)
 3ee:	96 b5       	in	r25, 0x26	; 38
 3f0:	94 36       	cpi	r25, 0x64	; 100
 3f2:	20 f4       	brcc	.+8      	; 0x3fc <set_minutes+0x52>
			{
				ONLED12();
 3f4:	95 b1       	in	r25, 0x05	; 5
 3f6:	90 61       	ori	r25, 0x10	; 16
 3f8:	95 b9       	out	0x05, r25	; 5
 3fa:	07 c0       	rjmp	.+14     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
			else
			{
				OFFLED12();
 3fc:	95 b1       	in	r25, 0x05	; 5
 3fe:	9f 7e       	andi	r25, 0xEF	; 239
 400:	95 b9       	out	0x05, r25	; 5
 402:	03 c0       	rjmp	.+6      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			}
		}
		else
		{
			OFFLED12();
 404:	95 b1       	in	r25, 0x05	; 5
 406:	9f 7e       	andi	r25, 0xEF	; 239
 408:	95 b9       	out	0x05, r25	; 5
		}
		if(minutes_units & (1<<3))
 40a:	83 ff       	sbrs	r24, 3
 40c:	0b c0       	rjmp	.+22     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
		{
			if(100>TCNT0)
 40e:	86 b5       	in	r24, 0x26	; 38
 410:	84 36       	cpi	r24, 0x64	; 100
 412:	20 f4       	brcc	.+8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
			{
				ONLED13();
 414:	85 b1       	in	r24, 0x05	; 5
 416:	88 60       	ori	r24, 0x08	; 8
 418:	85 b9       	out	0x05, r24	; 5
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			}
			else
			{
				OFFLED13();
 41c:	85 b1       	in	r24, 0x05	; 5
 41e:	87 7f       	andi	r24, 0xF7	; 247
 420:	85 b9       	out	0x05, r24	; 5
 422:	03 c0       	rjmp	.+6      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
			}
		}
		else
		{
			OFFLED13();
 424:	85 b1       	in	r24, 0x05	; 5
 426:	87 7f       	andi	r24, 0xF7	; 247
 428:	85 b9       	out	0x05, r24	; 5
		}
		if(minutes_tenths & (1<<0))
 42a:	60 ff       	sbrs	r22, 0
 42c:	0b c0       	rjmp	.+22     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
			if(100>TCNT0)
 42e:	86 b5       	in	r24, 0x26	; 38
 430:	84 36       	cpi	r24, 0x64	; 100
 432:	20 f4       	brcc	.+8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
			{
				ONLED7();
 434:	88 b1       	in	r24, 0x08	; 8
 436:	88 60       	ori	r24, 0x08	; 8
 438:	88 b9       	out	0x08, r24	; 8
 43a:	07 c0       	rjmp	.+14     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			}
			else
			{
				OFFLED7();	
 43c:	88 b1       	in	r24, 0x08	; 8
 43e:	87 7f       	andi	r24, 0xF7	; 247
 440:	88 b9       	out	0x08, r24	; 8
 442:	03 c0       	rjmp	.+6      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
			}
		}
		else
		{
			
			OFFLED7();
 444:	88 b1       	in	r24, 0x08	; 8
 446:	87 7f       	andi	r24, 0xF7	; 247
 448:	88 b9       	out	0x08, r24	; 8
		}
		if(minutes_tenths & (1<<1))
 44a:	61 ff       	sbrs	r22, 1
 44c:	0b c0       	rjmp	.+22     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
		{
			if(100>TCNT0)
 44e:	86 b5       	in	r24, 0x26	; 38
 450:	84 36       	cpi	r24, 0x64	; 100
 452:	20 f4       	brcc	.+8      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
			{
				ONLED8();
 454:	88 b1       	in	r24, 0x08	; 8
 456:	84 60       	ori	r24, 0x04	; 4
 458:	88 b9       	out	0x08, r24	; 8
 45a:	07 c0       	rjmp	.+14     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			}
			else
			{
				OFFLED8();
 45c:	88 b1       	in	r24, 0x08	; 8
 45e:	8b 7f       	andi	r24, 0xFB	; 251
 460:	88 b9       	out	0x08, r24	; 8
 462:	03 c0       	rjmp	.+6      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
			}
		}
		else
		{
			
			OFFLED8();
 464:	88 b1       	in	r24, 0x08	; 8
 466:	8b 7f       	andi	r24, 0xFB	; 251
 468:	88 b9       	out	0x08, r24	; 8
		}
		if(minutes_tenths & (1<<2))
 46a:	62 ff       	sbrs	r22, 2
 46c:	0b c0       	rjmp	.+22     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			if(100>TCNT0)
 46e:	86 b5       	in	r24, 0x26	; 38
 470:	84 36       	cpi	r24, 0x64	; 100
 472:	20 f4       	brcc	.+8      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
			{
				ONLED9();
 474:	88 b1       	in	r24, 0x08	; 8
 476:	82 60       	ori	r24, 0x02	; 2
 478:	88 b9       	out	0x08, r24	; 8
 47a:	08 95       	ret
			}
			else
			{
				OFFLED9();
 47c:	88 b1       	in	r24, 0x08	; 8
 47e:	8d 7f       	andi	r24, 0xFD	; 253
 480:	88 b9       	out	0x08, r24	; 8
 482:	08 95       	ret
			}
		}
		else
		{
			OFFLED9();
 484:	88 b1       	in	r24, 0x08	; 8
 486:	8d 7f       	andi	r24, 0xFD	; 253
 488:	88 b9       	out	0x08, r24	; 8
 48a:	08 95       	ret

Disassembly of section .text.set_hours:

0000048c <set_hours>:
		}
	}
void set_hours(uint8_t hours_units,uint8_t hours_tenths)
{
		if(hours_units & (1<<0))
 48c:	80 ff       	sbrs	r24, 0
 48e:	0c c0       	rjmp	.+24     	; 0x4a8 <set_hours+0x1c>
		{
			if(100>TCNT2)
 490:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 494:	94 36       	cpi	r25, 0x64	; 100
 496:	20 f4       	brcc	.+8      	; 0x4a0 <set_hours+0x14>
			{
				ONLED3();
 498:	9b b1       	in	r25, 0x0b	; 11
 49a:	90 68       	ori	r25, 0x80	; 128
 49c:	9b b9       	out	0x0b, r25	; 11
 49e:	07 c0       	rjmp	.+14     	; 0x4ae <set_hours+0x22>
			}
			else
			{
				OFFLED3();
 4a0:	9b b1       	in	r25, 0x0b	; 11
 4a2:	9f 77       	andi	r25, 0x7F	; 127
 4a4:	9b b9       	out	0x0b, r25	; 11
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <set_hours+0x22>
			}
		}
		else
		{
			OFFLED3();
 4a8:	9b b1       	in	r25, 0x0b	; 11
 4aa:	9f 77       	andi	r25, 0x7F	; 127
 4ac:	9b b9       	out	0x0b, r25	; 11
		}
		if(hours_units & (1<<1))
 4ae:	81 ff       	sbrs	r24, 1
 4b0:	0c c0       	rjmp	.+24     	; 0x4ca <set_hours+0x3e>
		{
			if(100>TCNT2)
 4b2:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 4b6:	94 36       	cpi	r25, 0x64	; 100
 4b8:	20 f4       	brcc	.+8      	; 0x4c2 <set_hours+0x36>
			{
				ONLED4();
 4ba:	95 b1       	in	r25, 0x05	; 5
 4bc:	91 60       	ori	r25, 0x01	; 1
 4be:	95 b9       	out	0x05, r25	; 5
 4c0:	07 c0       	rjmp	.+14     	; 0x4d0 <set_hours+0x44>
			}
			else
			{
				OFFLED4();
 4c2:	95 b1       	in	r25, 0x05	; 5
 4c4:	9e 7f       	andi	r25, 0xFE	; 254
 4c6:	95 b9       	out	0x05, r25	; 5
 4c8:	03 c0       	rjmp	.+6      	; 0x4d0 <set_hours+0x44>
			}
		}
		else
		{
			OFFLED4();
 4ca:	95 b1       	in	r25, 0x05	; 5
 4cc:	9e 7f       	andi	r25, 0xFE	; 254
 4ce:	95 b9       	out	0x05, r25	; 5
		}
		if(hours_units & (1<<2))
 4d0:	82 ff       	sbrs	r24, 2
 4d2:	0b c0       	rjmp	.+22     	; 0x4ea <set_hours+0x5e>
		{
			if(100>TCNT0)
 4d4:	96 b5       	in	r25, 0x26	; 38
 4d6:	94 36       	cpi	r25, 0x64	; 100
 4d8:	20 f4       	brcc	.+8      	; 0x4e2 <set_hours+0x56>
			{
				ONLED5();
 4da:	9b b1       	in	r25, 0x0b	; 11
 4dc:	98 60       	ori	r25, 0x08	; 8
 4de:	9b b9       	out	0x0b, r25	; 11
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <set_hours+0x64>
			}
			else
			{
				OFFLED5();
 4e2:	9b b1       	in	r25, 0x0b	; 11
 4e4:	97 7f       	andi	r25, 0xF7	; 247
 4e6:	9b b9       	out	0x0b, r25	; 11
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <set_hours+0x64>
			}
		}
		else
		{
			OFFLED5();
 4ea:	9b b1       	in	r25, 0x0b	; 11
 4ec:	97 7f       	andi	r25, 0xF7	; 247
 4ee:	9b b9       	out	0x0b, r25	; 11
		}
		if(hours_units & (1<<3))
 4f0:	83 ff       	sbrs	r24, 3
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <set_hours+0x80>
		{
			if(100>TCNT2)
 4f4:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 4f8:	84 36       	cpi	r24, 0x64	; 100
 4fa:	20 f4       	brcc	.+8      	; 0x504 <set_hours+0x78>
			{
				ONLED6();
 4fc:	8b b1       	in	r24, 0x0b	; 11
 4fe:	80 61       	ori	r24, 0x10	; 16
 500:	8b b9       	out	0x0b, r24	; 11
 502:	07 c0       	rjmp	.+14     	; 0x512 <set_hours+0x86>
			}
			else
			{
				OFFLED6();
 504:	8b b1       	in	r24, 0x0b	; 11
 506:	8f 7e       	andi	r24, 0xEF	; 239
 508:	8b b9       	out	0x0b, r24	; 11
 50a:	03 c0       	rjmp	.+6      	; 0x512 <set_hours+0x86>
			}
		}
		else
		{
			OFFLED6();
 50c:	8b b1       	in	r24, 0x0b	; 11
 50e:	8f 7e       	andi	r24, 0xEF	; 239
 510:	8b b9       	out	0x0b, r24	; 11
		}
		if(hours_tenths & (1<<0))
 512:	60 ff       	sbrs	r22, 0
 514:	0c c0       	rjmp	.+24     	; 0x52e <set_hours+0xa2>
		{
			if(100>TCNT2)
 516:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 51a:	84 36       	cpi	r24, 0x64	; 100
 51c:	20 f4       	brcc	.+8      	; 0x526 <set_hours+0x9a>
			{
				ONLED1();
 51e:	8b b1       	in	r24, 0x0b	; 11
 520:	80 62       	ori	r24, 0x20	; 32
 522:	8b b9       	out	0x0b, r24	; 11
 524:	07 c0       	rjmp	.+14     	; 0x534 <set_hours+0xa8>
			}
			else
			{
				OFFLED1();
 526:	8b b1       	in	r24, 0x0b	; 11
 528:	8f 7d       	andi	r24, 0xDF	; 223
 52a:	8b b9       	out	0x0b, r24	; 11
 52c:	03 c0       	rjmp	.+6      	; 0x534 <set_hours+0xa8>
			}
		}
		else
		{
			OFFLED1();
 52e:	8b b1       	in	r24, 0x0b	; 11
 530:	8f 7d       	andi	r24, 0xDF	; 223
 532:	8b b9       	out	0x0b, r24	; 11
		}
		if(hours_tenths & (1<<1))
 534:	61 ff       	sbrs	r22, 1
 536:	0c c0       	rjmp	.+24     	; 0x550 <set_hours+0xc4>
		{
			if(100>TCNT2)
 538:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 53c:	84 36       	cpi	r24, 0x64	; 100
 53e:	20 f4       	brcc	.+8      	; 0x548 <set_hours+0xbc>
			{
				ONLED2();
 540:	8b b1       	in	r24, 0x0b	; 11
 542:	80 64       	ori	r24, 0x40	; 64
 544:	8b b9       	out	0x0b, r24	; 11
 546:	08 95       	ret
			}
			else
			{
				OFFLED2();
 548:	8b b1       	in	r24, 0x0b	; 11
 54a:	8f 7b       	andi	r24, 0xBF	; 191
 54c:	8b b9       	out	0x0b, r24	; 11
 54e:	08 95       	ret
			}
		}
		else
		{
			OFFLED2();
 550:	8b b1       	in	r24, 0x0b	; 11
 552:	8f 7b       	andi	r24, 0xBF	; 191
 554:	8b b9       	out	0x0b, r24	; 11
 556:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00000810 <_fini>:
 810:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000812 <__funcs_on_exit>:
 812:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000814 <__simulator_exit>:
 814:	08 95       	ret

Disassembly of section .text.exit:

00000780 <exit>:
 780:	ec 01       	movw	r28, r24
 782:	0e 94 09 04 	call	0x812	; 0x812 <__funcs_on_exit>
 786:	0e 94 08 04 	call	0x810	; 0x810 <_fini>
 78a:	ce 01       	movw	r24, r28
 78c:	0e 94 0a 04 	call	0x814	; 0x814 <__simulator_exit>
 790:	ce 01       	movw	r24, r28
 792:	0e 94 06 04 	call	0x80c	; 0x80c <_Exit>

Disassembly of section .text._Exit:

0000080c <_Exit>:
 80c:	0e 94 3e 00 	call	0x7c	; 0x7c <_exit>
