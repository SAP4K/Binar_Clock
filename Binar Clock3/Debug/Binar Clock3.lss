
Binar Clock3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000926  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000963  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bb0  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a1f  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c3e  00000000  00000000  0000303a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00003c78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000302  00000000  00000000  00003e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000091a  00000000  00000000  0000415e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c8  00000000  00000000  00004a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000884  00000884  00000918  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.init_I2C 00000010  0000084e  0000084e  000008e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Start_I2C 00000010  0000085e  0000085e  000008f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Stop_I2C 00000008  0000087c  0000087c  00000910  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Send_I2C 00000014  00000812  00000812  000008a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Read_I2C 00000014  00000826  00000826  000008ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.init_function 00000036  00000798  00000798  0000082c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.init_first_timing 00000016  000007e6  000007e6  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.check_button 00000090  0000059a  0000059a  0000062e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.main    000001a2  000000c2  000000c2  00000156  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__vector_1 00000014  0000083a  0000083a  000008ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .bss.click_cont 00000004  00800100  00800100  00000926  2**0
                  ALLOC
 25 .text.UART_TTL 00000018  000007ce  000007ce  00000862  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.Transmit_UART_TTL 0000000e  0000086e  0000086e  00000902  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.get_current_time 00000042  000006e0  000006e0  00000774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.run_minutes 0000003e  00000722  00000722  000007b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.run_hours 00000038  00000760  00000760  000007f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.init_watch 00000066  0000062a  0000062a  000006be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.LED_OFF 00000050  00000690  00000690  00000724  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.Start   00000188  00000264  00000264  000002f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.set_minutes 000000e2  000003ec  000003ec  00000480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.set_hours 000000cc  000004ce  000004ce  00000562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.__dummy_fini 00000002  0000088c  0000088c  00000920  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.__dummy_funcs_on_exit 00000002  0000088e  0000088e  00000922  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.__dummy_simulator_exit 00000002  00000890  00000890  00000924  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.exit    00000016  000007fc  000007fc  00000890  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text._Exit   00000004  00000888  00000888  0000091c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 37 00 	jmp	0x6e	; 0x6e <__ctors_end>
   4:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_1>
   8:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
   c:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  10:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  14:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  18:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  1c:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  20:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  24:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  28:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  2c:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  30:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  34:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  38:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  3c:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  40:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  44:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  48:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  4c:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  50:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  54:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  58:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  5c:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  60:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>
  64:	0c 94 42 04 	jmp	0x884	; 0x884 <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 04       	cpc	r0, r1
  6c:	80 00       	.word	0x0080	; ????

0000006e <__ctors_end>:
  6e:	11 24       	eor	r1, r1
  70:	1f be       	out	0x3f, r1	; 63
  72:	cf ef       	ldi	r28, 0xFF	; 255
  74:	d8 e0       	ldi	r29, 0x08	; 8
  76:	de bf       	out	0x3e, r29	; 62
  78:	cd bf       	out	0x3d, r28	; 61

0000007a <__do_copy_data>:
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	17 c0       	rjmp	.+46     	; 0xb0 <__do_clear_bss+0x8>
  82:	b5 91       	lpm	r27, Z+
  84:	a5 91       	lpm	r26, Z+
  86:	35 91       	lpm	r19, Z+
  88:	25 91       	lpm	r18, Z+
  8a:	05 91       	lpm	r16, Z+
  8c:	07 fd       	sbrc	r16, 7
  8e:	0c c0       	rjmp	.+24     	; 0xa8 <__do_clear_bss>
  90:	95 91       	lpm	r25, Z+
  92:	85 91       	lpm	r24, Z+
  94:	ef 01       	movw	r28, r30
  96:	f9 2f       	mov	r31, r25
  98:	e8 2f       	mov	r30, r24
  9a:	05 90       	lpm	r0, Z+
  9c:	0d 92       	st	X+, r0
  9e:	a2 17       	cp	r26, r18
  a0:	b3 07       	cpc	r27, r19
  a2:	d9 f7       	brne	.-10     	; 0x9a <__do_copy_data+0x20>
  a4:	fe 01       	movw	r30, r28
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <__do_clear_bss+0x8>

000000a8 <__do_clear_bss>:
  a8:	1d 92       	st	X+, r1
  aa:	a2 17       	cp	r26, r18
  ac:	b3 07       	cpc	r27, r19
  ae:	e1 f7       	brne	.-8      	; 0xa8 <__do_clear_bss>
  b0:	ed 36       	cpi	r30, 0x6D	; 109
  b2:	f4 07       	cpc	r31, r20
  b4:	31 f7       	brne	.-52     	; 0x82 <__do_copy_data+0x8>
  b6:	0e 94 61 00 	call	0xc2	; 0xc2 <_etext>
  ba:	0c 94 fe 03 	jmp	0x7fc	; 0x7fc <exit>

000000be <_exit>:
  be:	f8 94       	cli

000000c0 <__stop_program>:
  c0:	ff cf       	rjmp	.-2      	; 0xc0 <__stop_program>

Disassembly of section .text:

00000884 <__bad_interrupt>:
 884:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_I2C:

0000084e <init_I2C>:

#include "I2C.h"
void init_I2C(void)
{
	TWBR = 0;
 84e:	e8 eb       	ldi	r30, 0xB8	; 184
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	10 82       	st	Z, r1
	TWBR = 0x20;
 854:	80 e2       	ldi	r24, 0x20	; 32
 856:	80 83       	st	Z, r24
	TWCR = 0;
 858:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 85c:	08 95       	ret

Disassembly of section .text.Start_I2C:

0000085e <Start_I2C>:
}
void Start_I2C(void)
{
	TWCR=(1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
 85e:	84 ea       	ldi	r24, 0xA4	; 164
 860:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR&(1<<TWINT)) == 0 );
 864:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 868:	88 23       	and	r24, r24
 86a:	e4 f7       	brge	.-8      	; 0x864 <Start_I2C+0x6>
}
 86c:	08 95       	ret

Disassembly of section .text.Stop_I2C:

0000087c <Stop_I2C>:
void Stop_I2C(void)
{
	TWCR=(1<<TWSTO)|(1<<TWEN)|(1<<TWINT);
 87c:	84 e9       	ldi	r24, 0x94	; 148
 87e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 882:	08 95       	ret

Disassembly of section .text.Send_I2C:

00000812 <Send_I2C>:
}
void Send_I2C(uint8_t data)
{
	TWDR = data;
 812:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR=(1<<TWINT)|(1<<TWEN);
 816:	84 e8       	ldi	r24, 0x84	; 132
 818:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while((TWCR&(1<<TWINT)) == 0 );
 81c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 820:	88 23       	and	r24, r24
 822:	e4 f7       	brge	.-8      	; 0x81c <Send_I2C+0xa>
}
 824:	08 95       	ret

Disassembly of section .text.Read_I2C:

00000826 <Read_I2C>:
uint8_t Read_I2C()
{
	TWCR=(1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 826:	84 ec       	ldi	r24, 0xC4	; 196
 828:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(!(TWCR & (1<<TWINT)));
 82c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 830:	88 23       	and	r24, r24
 832:	e4 f7       	brge	.-8      	; 0x82c <Read_I2C+0x6>
	return TWDR;
 834:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 838:	08 95       	ret

Disassembly of section .text.init_function:

00000798 <init_function>:
#include "Watch.h"
void init_function(void)
{
	DDRD = 0;
 798:	1a b8       	out	0x0a, r1	; 10
	DDRD = (1<<PD3) | (1<<PD4) | (1<<PD5) | (1<<PD6) | (1<<PD7);
 79a:	88 ef       	ldi	r24, 0xF8	; 248
 79c:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1<<PD2);
 79e:	8a b1       	in	r24, 0x0a	; 10
 7a0:	8b 7f       	andi	r24, 0xFB	; 251
 7a2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<PD2);
 7a4:	8b b1       	in	r24, 0x0b	; 11
 7a6:	84 60       	ori	r24, 0x04	; 4
 7a8:	8b b9       	out	0x0b, r24	; 11
	DDRB = 0;
 7aa:	14 b8       	out	0x04, r1	; 4
	DDRB = (1<<PB5) | (1<<PB4) | (1<<PB3) | (1<<PB0);
 7ac:	89 e3       	ldi	r24, 0x39	; 57
 7ae:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;
 7b0:	17 b8       	out	0x07, r1	; 7
	DDRC = (1<<PC3) | (1<<PC2) | (1<<PC1) | (1<<PC0);
 7b2:	8f e0       	ldi	r24, 0x0F	; 15
 7b4:	87 b9       	out	0x07, r24	; 7
	
	ACSR |= (1 << ACD); //Disable ADC
 7b6:	80 b7       	in	r24, 0x30	; 48
 7b8:	80 68       	ori	r24, 0x80	; 128
 7ba:	80 bf       	out	0x30, r24	; 48
	cli();
 7bc:	f8 94       	cli
	unsigned char rg = (MCUCR & ~(1 << BODSE)) | (1 << BODS);
 7be:	85 b7       	in	r24, 0x35	; 53
 7c0:	8f 79       	andi	r24, 0x9F	; 159
 7c2:	98 2f       	mov	r25, r24
 7c4:	90 64       	ori	r25, 0x40	; 64
	MCUCR = rg | (1 << BODSE);
 7c6:	80 66       	ori	r24, 0x60	; 96
 7c8:	85 bf       	out	0x35, r24	; 53
	MCUCR = rg;
 7ca:	95 bf       	out	0x35, r25	; 53
 7cc:	08 95       	ret

Disassembly of section .text.init_first_timing:

000007e6 <init_first_timing>:


}
void init_first_timing(void)
{
	TCCR0B = 0;
 7e6:	15 bc       	out	0x25, r1	; 37
	TCCR0B = (1<<CS01);
 7e8:	82 e0       	ldi	r24, 0x02	; 2
 7ea:	85 bd       	out	0x25, r24	; 37
	//TCCR1B = (1<<CS11);
	TCNT0 = 0;
 7ec:	16 bc       	out	0x26, r1	; 38
	//TCNT1 = 0;
	TCCR2B = 0;
 7ee:	e1 eb       	ldi	r30, 0xB1	; 177
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	10 82       	st	Z, r1
	TCCR2B = (1<<CS21);
 7f4:	80 83       	st	Z, r24
	TCNT2 = 0;
 7f6:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 7fa:	08 95       	ret

Disassembly of section .text.check_button:

0000059a <check_button>:
}
uint32_t click_cont = 0;
uint8_t check_button(uint16_t* button_counter,bool *check_if_button_is_pressed)
{
 59a:	fc 01       	movw	r30, r24
	if(click_cont > 1000)
 59c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5a0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5a4:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5a8:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5ac:	89 3e       	cpi	r24, 0xE9	; 233
 5ae:	93 40       	sbci	r25, 0x03	; 3
 5b0:	a1 05       	cpc	r26, r1
 5b2:	b1 05       	cpc	r27, r1
 5b4:	88 f0       	brcs	.+34     	; 0x5d8 <check_button+0x3e>
	{
		if(!(PIND & (1<<PD2)))
 5b6:	4a 99       	sbic	0x09, 2	; 9
 5b8:	07 c0       	rjmp	.+14     	; 0x5c8 <check_button+0x2e>
		{	
			(*check_if_button_is_pressed) = false;
 5ba:	db 01       	movw	r26, r22
 5bc:	1c 92       	st	X, r1
			(*button_counter)++;		
 5be:	80 81       	ld	r24, Z
 5c0:	91 81       	ldd	r25, Z+1	; 0x01
 5c2:	01 96       	adiw	r24, 0x01	; 1
 5c4:	91 83       	std	Z+1, r25	; 0x01
 5c6:	80 83       	st	Z, r24
		}
		click_cont = 0;
 5c8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 5cc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5d4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	}
	click_cont++;
 5d8:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5dc:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5e0:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5e4:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5e8:	4f 5f       	subi	r20, 0xFF	; 255
 5ea:	5f 4f       	sbci	r21, 0xFF	; 255
 5ec:	6f 4f       	sbci	r22, 0xFF	; 255
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f4:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5f8:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5fc:	70 93 03 01 	sts	0x0103, r23	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
	if((PIND & (1<<PD2)))
 600:	4a 9b       	sbis	0x09, 2	; 9
 602:	09 c0       	rjmp	.+18     	; 0x616 <check_button+0x7c>
	{
		if(((*button_counter) > 1)  && ((*button_counter) < 50))
 604:	80 81       	ld	r24, Z
 606:	91 81       	ldd	r25, Z+1	; 0x01
 608:	02 97       	sbiw	r24, 0x02	; 2
 60a:	c0 97       	sbiw	r24, 0x30	; 48
 60c:	20 f4       	brcc	.+8      	; 0x616 <check_button+0x7c>
		{
			(*button_counter) = 0;
 60e:	11 82       	std	Z+1, r1	; 0x01
 610:	10 82       	st	Z, r1
			return 1;
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret
		}
	}
	if((*button_counter) >= 50)
 616:	80 81       	ld	r24, Z
 618:	91 81       	ldd	r25, Z+1	; 0x01
 61a:	c2 97       	sbiw	r24, 0x32	; 50
 61c:	20 f0       	brcs	.+8      	; 0x626 <check_button+0x8c>
	{
		(*button_counter) = 0;
 61e:	11 82       	std	Z+1, r1	; 0x01
 620:	10 82       	st	Z, r1
		//Transmit_UART_TTL(97);
		return 2;
 622:	82 e0       	ldi	r24, 0x02	; 2
 624:	08 95       	ret
	}
	return 0;
 626:	80 e0       	ldi	r24, 0x00	; 0
}
 628:	08 95       	ret

Disassembly of section .text.main:

000000c2 <main>:
int main()
{
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	00 d0       	rcall	.+0      	; 0xc8 <main+0x6>
  c8:	00 d0       	rcall	.+0      	; 0xca <main+0x8>
  ca:	0f 92       	push	r0
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
	init_function();
  d0:	0e 94 cc 03 	call	0x798	; 0x798 <init_function>
	init_first_timing();
  d4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <init_first_timing>
	UART_TTL();
  d8:	0e 94 e7 03 	call	0x7ce	; 0x7ce <UART_TTL>
	uint8_t controler = 0;
	uint16_t button_counter = 0;
  dc:	1a 82       	std	Y+2, r1	; 0x02
  de:	19 82       	std	Y+1, r1	; 0x01
	uint8_t result1 = 1;
	uint8_t result2 = 0;
	uint8_t minutes_units = 0;
	uint8_t minutes_tenths = 0;	
  e0:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t hours_units = 0;
	uint8_t hours_tenths = 0;
  e2:	1c 82       	std	Y+4, r1	; 0x04
	bool check_if_button_is_pressed = false;
  e4:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t button_counter = 0;
	uint8_t result1 = 1;
	uint8_t result2 = 0;
	uint8_t minutes_units = 0;
	uint8_t minutes_tenths = 0;	
	uint8_t hours_units = 0;
  e6:	e1 2c       	mov	r14, r1
	UART_TTL();
	uint8_t controler = 0;
	uint16_t button_counter = 0;
	uint8_t result1 = 1;
	uint8_t result2 = 0;
	uint8_t minutes_units = 0;
  e8:	f1 2c       	mov	r15, r1
	init_function();
	init_first_timing();
	UART_TTL();
	uint8_t controler = 0;
	uint16_t button_counter = 0;
	uint8_t result1 = 1;
  ea:	01 e0       	ldi	r16, 0x01	; 1
int main()
{
	init_function();
	init_first_timing();
	UART_TTL();
	uint8_t controler = 0;
  ec:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t hours_tenths = 0;
	bool check_if_button_is_pressed = false;
	while(1)
	{
		
		switch(controler)
  ee:	11 30       	cpi	r17, 0x01	; 1
  f0:	81 f0       	breq	.+32     	; 0x112 <main+0x50>
  f2:	38 f0       	brcs	.+14     	; 0x102 <main+0x40>
  f4:	12 30       	cpi	r17, 0x02	; 2
  f6:	09 f4       	brne	.+2      	; 0xfa <main+0x38>
  f8:	5b c0       	rjmp	.+182    	; 0x1b0 <main+0xee>
  fa:	13 30       	cpi	r17, 0x03	; 3
  fc:	09 f4       	brne	.+2      	; 0x100 <main+0x3e>
  fe:	6d c0       	rjmp	.+218    	; 0x1da <main+0x118>
 100:	f6 cf       	rjmp	.-20     	; 0xee <main+0x2c>
		{
			case 0: { Start(); 
 102:	0e 94 32 01 	call	0x264	; 0x264 <Start>
				controler = 1; 
				run_minutes();  
 106:	0e 94 91 03 	call	0x722	; 0x722 <run_minutes>
				LED_OFF();
 10a:	0e 94 48 03 	call	0x690	; 0x690 <LED_OFF>
	{
		
		switch(controler)
		{
			case 0: { Start(); 
				controler = 1; 
 10e:	11 e0       	ldi	r17, 0x01	; 1
				run_minutes();  
				LED_OFF();
				} break;
 110:	ee cf       	rjmp	.-36     	; 0xee <main+0x2c>
			case 1:
			{
				result2 = check_button(&button_counter,&check_if_button_is_pressed);
 112:	be 01       	movw	r22, r28
 114:	6b 5f       	subi	r22, 0xFB	; 251
 116:	7f 4f       	sbci	r23, 0xFF	; 255
 118:	ce 01       	movw	r24, r28
 11a:	01 96       	adiw	r24, 0x01	; 1
 11c:	0e 94 cd 02 	call	0x59a	; 0x59a <check_button>
 120:	d8 2e       	mov	r13, r24
				if(result2 == 2)
 122:	22 e0       	ldi	r18, 0x02	; 2
 124:	82 13       	cpse	r24, r18
 126:	0a c0       	rjmp	.+20     	; 0x13c <main+0x7a>
				{
					result1++;
 128:	0f 5f       	subi	r16, 0xFF	; 255
					if(result1 == 2)
 12a:	02 30       	cpi	r16, 0x02	; 2
 12c:	21 f4       	brne	.+8      	; 0x136 <main+0x74>
					{
						run_hours();	
 12e:	0e 94 b0 03 	call	0x760	; 0x760 <run_hours>
						LED_OFF();	
 132:	0e 94 48 03 	call	0x690	; 0x690 <LED_OFF>
					}
					if(result1 == 3)
 136:	03 30       	cpi	r16, 0x03	; 3
 138:	09 f4       	brne	.+2      	; 0x13c <main+0x7a>
					{
						
						controler = 2;
 13a:	12 e0       	ldi	r17, 0x02	; 2
					}
				}
				if(result1 == 1)
 13c:	01 30       	cpi	r16, 0x01	; 1
 13e:	81 f4       	brne	.+32     	; 0x160 <main+0x9e>
				{
					if(result2 == 1)
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	d8 12       	cpse	r13, r24
 144:	0d c0       	rjmp	.+26     	; 0x160 <main+0x9e>
					{
						minutes_units++;
 146:	f3 94       	inc	r15
						if(minutes_units>9)
 148:	99 e0       	ldi	r25, 0x09	; 9
 14a:	9f 15       	cp	r25, r15
 14c:	48 f4       	brcc	.+18     	; 0x160 <main+0x9e>
						{
							minutes_units = 0;
							minutes_tenths++;
 14e:	8b 81       	ldd	r24, Y+3	; 0x03
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	8b 83       	std	Y+3, r24	; 0x03
							if(minutes_tenths>5)
 154:	86 30       	cpi	r24, 0x06	; 6
 156:	18 f0       	brcs	.+6      	; 0x15e <main+0x9c>
							{
								minutes_tenths = 0;
 158:	1b 82       	std	Y+3, r1	; 0x03
					if(result2 == 1)
					{
						minutes_units++;
						if(minutes_units>9)
						{
							minutes_units = 0;
 15a:	f1 2c       	mov	r15, r1
 15c:	01 c0       	rjmp	.+2      	; 0x160 <main+0x9e>
 15e:	f1 2c       	mov	r15, r1
								minutes_tenths = 0;
							}
						}
					}
				}
				if(result1 == 2)
 160:	02 30       	cpi	r16, 0x02	; 2
 162:	e9 f4       	brne	.+58     	; 0x19e <main+0xdc>
				{
					if(result2 == 1)
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	d2 12       	cpse	r13, r18
 168:	1a c0       	rjmp	.+52     	; 0x19e <main+0xdc>
					{
						hours_units++;
 16a:	e3 94       	inc	r14
						if(hours_units>9)
 16c:	89 e0       	ldi	r24, 0x09	; 9
 16e:	8e 15       	cp	r24, r14
 170:	48 f4       	brcc	.+18     	; 0x184 <main+0xc2>
						{
							hours_units = 0;
							hours_tenths++;
 172:	8c 81       	ldd	r24, Y+4	; 0x04
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	8c 83       	std	Y+4, r24	; 0x04
							if(hours_tenths>2)
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	18 f0       	brcs	.+6      	; 0x182 <main+0xc0>
							{
								hours_tenths = 0;
 17c:	1c 82       	std	Y+4, r1	; 0x04
								hours_units = 0;
 17e:	e1 2c       	mov	r14, r1
 180:	01 c0       	rjmp	.+2      	; 0x184 <main+0xc2>
					if(result2 == 1)
					{
						hours_units++;
						if(hours_units>9)
						{
							hours_units = 0;
 182:	e1 2c       	mov	r14, r1
							{
								hours_tenths = 0;
								hours_units = 0;
							}	
						}
						if(hours_tenths>=2 && hours_units>3)
 184:	8c 81       	ldd	r24, Y+4	; 0x04
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	50 f0       	brcs	.+20     	; 0x19e <main+0xdc>
 18a:	93 e0       	ldi	r25, 0x03	; 3
 18c:	9e 15       	cp	r25, r14
 18e:	38 f4       	brcc	.+14     	; 0x19e <main+0xdc>
							{
								Transmit_UART_TTL(hours_tenths);
 190:	0e 94 37 04 	call	0x86e	; 0x86e <Transmit_UART_TTL>
								Transmit_UART_TTL(hours_units);
 194:	8e 2d       	mov	r24, r14
 196:	0e 94 37 04 	call	0x86e	; 0x86e <Transmit_UART_TTL>
								hours_tenths = 0;
 19a:	1c 82       	std	Y+4, r1	; 0x04
								hours_units = 0;
 19c:	e1 2c       	mov	r14, r1
								
							}
					}
				}
				set_minutes(minutes_units,minutes_tenths);
 19e:	6b 81       	ldd	r22, Y+3	; 0x03
 1a0:	8f 2d       	mov	r24, r15
 1a2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_minutes>
				set_hours(hours_units,hours_tenths);
 1a6:	6c 81       	ldd	r22, Y+4	; 0x04
 1a8:	8e 2d       	mov	r24, r14
 1aa:	0e 94 67 02 	call	0x4ce	; 0x4ce <set_hours>
				result2 = 0;
			} break;
 1ae:	9f cf       	rjmp	.-194    	; 0xee <main+0x2c>
			case 2:
			{	
				LED_OFF();	
 1b0:	0e 94 48 03 	call	0x690	; 0x690 <LED_OFF>
				init_watch(minutes_units,minutes_tenths,hours_units,hours_tenths);
 1b4:	2c 81       	ldd	r18, Y+4	; 0x04
 1b6:	4e 2d       	mov	r20, r14
 1b8:	6b 81       	ldd	r22, Y+3	; 0x03
 1ba:	8f 2d       	mov	r24, r15
 1bc:	0e 94 15 03 	call	0x62a	; 0x62a <init_watch>
				button_counter = 0;
 1c0:	1a 82       	std	Y+2, r1	; 0x02
 1c2:	19 82       	std	Y+1, r1	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	89 e6       	ldi	r24, 0x69	; 105
 1c8:	98 e1       	ldi	r25, 0x18	; 24
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x108>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x112>
 1d4:	00 00       	nop
				controler = 3;
 1d6:	13 e0       	ldi	r17, 0x03	; 3
 1d8:	8a cf       	rjmp	.-236    	; 0xee <main+0x2c>
				_delay_ms(1000);
			}break;
			case 3: {
				if(button_counter == 0)
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	89 2b       	or	r24, r25
 1e0:	59 f5       	brne	.+86     	; 0x238 <main+0x176>
				{
					EICRA |= (1<<ISC01); 
 1e2:	e9 e6       	ldi	r30, 0x69	; 105
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	82 60       	ori	r24, 0x02	; 2
 1ea:	80 83       	st	Z, r24
					EIMSK |= (1<<INT0); 
 1ec:	8d b3       	in	r24, 0x1d	; 29
 1ee:	81 60       	ori	r24, 0x01	; 1
 1f0:	8d bb       	out	0x1d, r24	; 29
					sei();
 1f2:	78 94       	sei
					set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 1f4:	83 b7       	in	r24, 0x33	; 51
 1f6:	81 7f       	andi	r24, 0xF1	; 241
 1f8:	86 60       	ori	r24, 0x06	; 6
 1fa:	83 bf       	out	0x33, r24	; 51
					sleep_enable();
 1fc:	83 b7       	in	r24, 0x33	; 51
 1fe:	81 60       	ori	r24, 0x01	; 1
 200:	83 bf       	out	0x33, r24	; 51
					sleep_cpu();
 202:	88 95       	sleep
					sleep_disable();
 204:	83 b7       	in	r24, 0x33	; 51
 206:	8e 7f       	andi	r24, 0xFE	; 254
 208:	83 bf       	out	0x33, r24	; 51
					init_I2C();
 20a:	0e 94 27 04 	call	0x84e	; 0x84e <init_I2C>
					get_current_time(&hours_tenths,&minutes_tenths);
 20e:	be 01       	movw	r22, r28
 210:	6d 5f       	subi	r22, 0xFD	; 253
 212:	7f 4f       	sbci	r23, 0xFF	; 255
 214:	ce 01       	movw	r24, r28
 216:	04 96       	adiw	r24, 0x04	; 4
 218:	0e 94 70 03 	call	0x6e0	; 0x6e0 <get_current_time>
					minutes_units = 0b00001111 & minutes_tenths;
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	28 2f       	mov	r18, r24
 220:	2f 70       	andi	r18, 0x0F	; 15
 222:	f2 2e       	mov	r15, r18
					minutes_tenths&= 0b11110000;
					minutes_tenths = minutes_tenths >> 4;
 224:	82 95       	swap	r24
 226:	8f 70       	andi	r24, 0x0F	; 15
 228:	8b 83       	std	Y+3, r24	; 0x03
					hours_units = 0b00001111 & hours_tenths;
 22a:	8c 81       	ldd	r24, Y+4	; 0x04
 22c:	98 2f       	mov	r25, r24
 22e:	9f 70       	andi	r25, 0x0F	; 15
 230:	e9 2e       	mov	r14, r25
					hours_tenths &= 0b11110000;
					hours_tenths = hours_tenths>>4;
 232:	82 95       	swap	r24
 234:	8f 70       	andi	r24, 0x0F	; 15
 236:	8c 83       	std	Y+4, r24	; 0x04
				}
					set_minutes(minutes_units,minutes_tenths);
 238:	6b 81       	ldd	r22, Y+3	; 0x03
 23a:	8f 2d       	mov	r24, r15
 23c:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_minutes>
					set_hours(hours_units,hours_tenths);
 240:	6c 81       	ldd	r22, Y+4	; 0x04
 242:	8e 2d       	mov	r24, r14
 244:	0e 94 67 02 	call	0x4ce	; 0x4ce <set_hours>
					button_counter++;
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	9a 81       	ldd	r25, Y+2	; 0x02
 24c:	01 96       	adiw	r24, 0x01	; 1
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	89 83       	std	Y+1, r24	; 0x01
					if(button_counter>=65500)
 252:	8c 3d       	cpi	r24, 0xDC	; 220
 254:	9f 4f       	sbci	r25, 0xFF	; 255
 256:	08 f4       	brcc	.+2      	; 0x25a <main+0x198>
 258:	4a cf       	rjmp	.-364    	; 0xee <main+0x2c>
					{
						LED_OFF();
 25a:	0e 94 48 03 	call	0x690	; 0x690 <LED_OFF>
						button_counter=0;
 25e:	1a 82       	std	Y+2, r1	; 0x02
 260:	19 82       	std	Y+1, r1	; 0x01
 262:	45 cf       	rjmp	.-374    	; 0xee <main+0x2c>

Disassembly of section .text.__vector_1:

0000083a <__vector_1>:
		}
	}
}

ISR(INT0_vect)
{
 83a:	1f 92       	push	r1
 83c:	0f 92       	push	r0
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	0f 92       	push	r0
 842:	11 24       	eor	r1, r1
 844:	0f 90       	pop	r0
 846:	0f be       	out	0x3f, r0	; 63
 848:	0f 90       	pop	r0
 84a:	1f 90       	pop	r1
 84c:	18 95       	reti

Disassembly of section .text.UART_TTL:

000007ce <UART_TTL>:
#include "UART_TTL.h"
void UART_TTL()
{
	UCSR0B = 0;
 7ce:	e1 ec       	ldi	r30, 0xC1	; 193
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	10 82       	st	Z, r1
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);
 7d4:	80 81       	ld	r24, Z
 7d6:	88 61       	ori	r24, 0x18	; 24
 7d8:	80 83       	st	Z, r24
	//UCSR0B |= (1<<RXC0);
	//UCSR0B |= (1<<TXC0);
	//sei();
	UBRR0L = BAUD_PRESCALE;
 7da:	83 e3       	ldi	r24, 0x33	; 51
 7dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (BAUD_PRESCALE >> 8);
 7e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 7e4:	08 95       	ret

Disassembly of section .text.Transmit_UART_TTL:

0000086e <Transmit_UART_TTL>:
}
void Transmit_UART_TTL(uint8_t data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 86e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 872:	95 ff       	sbrs	r25, 5
 874:	fc cf       	rjmp	.-8      	; 0x86e <Transmit_UART_TTL>
	UDR0 = data;
 876:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 87a:	08 95       	ret

Disassembly of section .text.get_current_time:

000006e0 <get_current_time>:

#include "Watch.h"
void get_current_time(uint8_t* hours,uint8_t* minutes)
{
 6e0:	0f 93       	push	r16
 6e2:	1f 93       	push	r17
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
 6e8:	ec 01       	movw	r28, r24
 6ea:	8b 01       	movw	r16, r22
	Start_I2C();
 6ec:	0e 94 2f 04 	call	0x85e	; 0x85e <Start_I2C>
	Send_I2C(0b11010000);
 6f0:	80 ed       	ldi	r24, 0xD0	; 208
 6f2:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(0);
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	
	//Transmit_UART_TTL('a');
	Start_I2C();
 6fc:	0e 94 2f 04 	call	0x85e	; 0x85e <Start_I2C>
	Send_I2C(0b11010001);
 700:	81 ed       	ldi	r24, 0xD1	; 209
 702:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Read_I2C();
 706:	0e 94 13 04 	call	0x826	; 0x826 <Read_I2C>
	(*minutes)=Read_I2C();
 70a:	0e 94 13 04 	call	0x826	; 0x826 <Read_I2C>
 70e:	f8 01       	movw	r30, r16
 710:	80 83       	st	Z, r24
	(*hours) = Read_I2C();
 712:	0e 94 13 04 	call	0x826	; 0x826 <Read_I2C>
 716:	88 83       	st	Y, r24
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	1f 91       	pop	r17
 71e:	0f 91       	pop	r16
 720:	08 95       	ret

Disassembly of section .text.run_minutes:

00000722 <run_minutes>:
void run_minutes()
{
	ONLED7();
 722:	88 b1       	in	r24, 0x08	; 8
 724:	88 60       	ori	r24, 0x08	; 8
 726:	88 b9       	out	0x08, r24	; 8
	ONLED8();
 728:	88 b1       	in	r24, 0x08	; 8
 72a:	84 60       	ori	r24, 0x04	; 4
 72c:	88 b9       	out	0x08, r24	; 8
	ONLED9();
 72e:	88 b1       	in	r24, 0x08	; 8
 730:	82 60       	ori	r24, 0x02	; 2
 732:	88 b9       	out	0x08, r24	; 8
	ONLED10();
 734:	88 b1       	in	r24, 0x08	; 8
 736:	81 60       	ori	r24, 0x01	; 1
 738:	88 b9       	out	0x08, r24	; 8
	ONLED11();
 73a:	85 b1       	in	r24, 0x05	; 5
 73c:	80 62       	ori	r24, 0x20	; 32
 73e:	85 b9       	out	0x05, r24	; 5
	ONLED12();
 740:	85 b1       	in	r24, 0x05	; 5
 742:	80 61       	ori	r24, 0x10	; 16
 744:	85 b9       	out	0x05, r24	; 5
	ONLED13();
 746:	85 b1       	in	r24, 0x05	; 5
 748:	88 60       	ori	r24, 0x08	; 8
 74a:	85 b9       	out	0x05, r24	; 5
 74c:	2f ef       	ldi	r18, 0xFF	; 255
 74e:	84 e3       	ldi	r24, 0x34	; 52
 750:	9c e0       	ldi	r25, 0x0C	; 12
 752:	21 50       	subi	r18, 0x01	; 1
 754:	80 40       	sbci	r24, 0x00	; 0
 756:	90 40       	sbci	r25, 0x00	; 0
 758:	e1 f7       	brne	.-8      	; 0x752 <run_minutes+0x30>
 75a:	00 c0       	rjmp	.+0      	; 0x75c <run_minutes+0x3a>
 75c:	00 00       	nop
 75e:	08 95       	ret

Disassembly of section .text.run_hours:

00000760 <run_hours>:
	_delay_ms(500);
}
void run_hours()
{
	ONLED1();
 760:	8b b1       	in	r24, 0x0b	; 11
 762:	80 62       	ori	r24, 0x20	; 32
 764:	8b b9       	out	0x0b, r24	; 11
	ONLED2();
 766:	8b b1       	in	r24, 0x0b	; 11
 768:	80 64       	ori	r24, 0x40	; 64
 76a:	8b b9       	out	0x0b, r24	; 11
	ONLED3();
 76c:	8b b1       	in	r24, 0x0b	; 11
 76e:	80 68       	ori	r24, 0x80	; 128
 770:	8b b9       	out	0x0b, r24	; 11
	ONLED4();
 772:	85 b1       	in	r24, 0x05	; 5
 774:	81 60       	ori	r24, 0x01	; 1
 776:	85 b9       	out	0x05, r24	; 5
	ONLED5();
 778:	8b b1       	in	r24, 0x0b	; 11
 77a:	88 60       	ori	r24, 0x08	; 8
 77c:	8b b9       	out	0x0b, r24	; 11
	ONLED6();
 77e:	8b b1       	in	r24, 0x0b	; 11
 780:	80 61       	ori	r24, 0x10	; 16
 782:	8b b9       	out	0x0b, r24	; 11
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	84 e3       	ldi	r24, 0x34	; 52
 788:	9c e0       	ldi	r25, 0x0C	; 12
 78a:	21 50       	subi	r18, 0x01	; 1
 78c:	80 40       	sbci	r24, 0x00	; 0
 78e:	90 40       	sbci	r25, 0x00	; 0
 790:	e1 f7       	brne	.-8      	; 0x78a <run_hours+0x2a>
 792:	00 c0       	rjmp	.+0      	; 0x794 <run_hours+0x34>
 794:	00 00       	nop
 796:	08 95       	ret

Disassembly of section .text.init_watch:

0000062a <init_watch>:
	_delay_ms(500);
}
void init_watch(uint8_t minutes_units,uint8_t minutes_tenths,uint8_t hours_units,uint8_t hours_tenths)
{
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	d8 2f       	mov	r29, r24
 634:	16 2f       	mov	r17, r22
 636:	c4 2f       	mov	r28, r20
 638:	02 2f       	mov	r16, r18
	init_I2C();
 63a:	0e 94 27 04 	call	0x84e	; 0x84e <init_I2C>
	//UART_TTL();
	Start_I2C();
 63e:	0e 94 2f 04 	call	0x85e	; 0x85e <Start_I2C>
	uint8_t hours = hours_tenths<<4;
	hours += hours_units;
 642:	80 e1       	ldi	r24, 0x10	; 16
 644:	08 9f       	mul	r16, r24
 646:	c0 0d       	add	r28, r0
 648:	11 24       	eor	r1, r1
	uint8_t minutes = minutes_tenths<<4;
	minutes+=minutes_units;
 64a:	80 e1       	ldi	r24, 0x10	; 16
 64c:	18 9f       	mul	r17, r24
 64e:	d0 0d       	add	r29, r0
 650:	11 24       	eor	r1, r1
	Send_I2C(0b11010000);
 652:	80 ed       	ldi	r24, 0xD0	; 208
 654:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(0);
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(0);
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(minutes);
 664:	8d 2f       	mov	r24, r29
 666:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(hours);
 66a:	8c 2f       	mov	r24, r28
 66c:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(0x04);
 670:	84 e0       	ldi	r24, 0x04	; 4
 672:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(0x05);
 676:	85 e0       	ldi	r24, 0x05	; 5
 678:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Send_I2C(0x06);
 67c:	86 e0       	ldi	r24, 0x06	; 6
 67e:	0e 94 09 04 	call	0x812	; 0x812 <Send_I2C>
	Stop_I2C();
 682:	0e 94 3e 04 	call	0x87c	; 0x87c <Stop_I2C>

}
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	0f 91       	pop	r16
 68e:	08 95       	ret

Disassembly of section .text.LED_OFF:

00000690 <LED_OFF>:

void LED_OFF()
{
	OFFLED1();
 690:	8b b1       	in	r24, 0x0b	; 11
 692:	8f 7d       	andi	r24, 0xDF	; 223
 694:	8b b9       	out	0x0b, r24	; 11
	OFFLED2();
 696:	8b b1       	in	r24, 0x0b	; 11
 698:	8f 7b       	andi	r24, 0xBF	; 191
 69a:	8b b9       	out	0x0b, r24	; 11
	OFFLED3();
 69c:	8b b1       	in	r24, 0x0b	; 11
 69e:	8f 77       	andi	r24, 0x7F	; 127
 6a0:	8b b9       	out	0x0b, r24	; 11
	OFFLED4();
 6a2:	85 b1       	in	r24, 0x05	; 5
 6a4:	8e 7f       	andi	r24, 0xFE	; 254
 6a6:	85 b9       	out	0x05, r24	; 5
	OFFLED5();
 6a8:	8b b1       	in	r24, 0x0b	; 11
 6aa:	87 7f       	andi	r24, 0xF7	; 247
 6ac:	8b b9       	out	0x0b, r24	; 11
	OFFLED6();
 6ae:	8b b1       	in	r24, 0x0b	; 11
 6b0:	8f 7e       	andi	r24, 0xEF	; 239
 6b2:	8b b9       	out	0x0b, r24	; 11
	OFFLED7();
 6b4:	88 b1       	in	r24, 0x08	; 8
 6b6:	87 7f       	andi	r24, 0xF7	; 247
 6b8:	88 b9       	out	0x08, r24	; 8
	OFFLED8();
 6ba:	88 b1       	in	r24, 0x08	; 8
 6bc:	8b 7f       	andi	r24, 0xFB	; 251
 6be:	88 b9       	out	0x08, r24	; 8
	OFFLED9();
 6c0:	88 b1       	in	r24, 0x08	; 8
 6c2:	8d 7f       	andi	r24, 0xFD	; 253
 6c4:	88 b9       	out	0x08, r24	; 8
	OFFLED10();
 6c6:	88 b1       	in	r24, 0x08	; 8
 6c8:	8e 7f       	andi	r24, 0xFE	; 254
 6ca:	88 b9       	out	0x08, r24	; 8
	OFFLED11();
 6cc:	85 b1       	in	r24, 0x05	; 5
 6ce:	8f 7d       	andi	r24, 0xDF	; 223
 6d0:	85 b9       	out	0x05, r24	; 5
	OFFLED12();
 6d2:	85 b1       	in	r24, 0x05	; 5
 6d4:	8f 7e       	andi	r24, 0xEF	; 239
 6d6:	85 b9       	out	0x05, r24	; 5
	OFFLED13();
 6d8:	85 b1       	in	r24, 0x05	; 5
 6da:	87 7f       	andi	r24, 0xF7	; 247
 6dc:	85 b9       	out	0x05, r24	; 5
 6de:	08 95       	ret

Disassembly of section .text.Start:

00000264 <Start>:
}
void Start()
{
		ONLED1();
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	80 62       	ori	r24, 0x20	; 32
 268:	8b b9       	out	0x0b, r24	; 11
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	84 e3       	ldi	r24, 0x34	; 52
 26e:	9c e0       	ldi	r25, 0x0C	; 12
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <Start+0xc>
 278:	00 c0       	rjmp	.+0      	; 0x27a <Start+0x16>
 27a:	00 00       	nop
		_delay_ms(500);
		OFFLED1();
 27c:	8b b1       	in	r24, 0x0b	; 11
 27e:	8f 7d       	andi	r24, 0xDF	; 223
 280:	8b b9       	out	0x0b, r24	; 11
		ONLED2();
 282:	8b b1       	in	r24, 0x0b	; 11
 284:	80 64       	ori	r24, 0x40	; 64
 286:	8b b9       	out	0x0b, r24	; 11
 288:	2f ef       	ldi	r18, 0xFF	; 255
 28a:	84 e3       	ldi	r24, 0x34	; 52
 28c:	9c e0       	ldi	r25, 0x0C	; 12
 28e:	21 50       	subi	r18, 0x01	; 1
 290:	80 40       	sbci	r24, 0x00	; 0
 292:	90 40       	sbci	r25, 0x00	; 0
 294:	e1 f7       	brne	.-8      	; 0x28e <Start+0x2a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <Start+0x34>
 298:	00 00       	nop
		_delay_ms(500);
		OFFLED2();
 29a:	8b b1       	in	r24, 0x0b	; 11
 29c:	8f 7b       	andi	r24, 0xBF	; 191
 29e:	8b b9       	out	0x0b, r24	; 11
		ONLED3();
 2a0:	8b b1       	in	r24, 0x0b	; 11
 2a2:	80 68       	ori	r24, 0x80	; 128
 2a4:	8b b9       	out	0x0b, r24	; 11
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	84 e3       	ldi	r24, 0x34	; 52
 2aa:	9c e0       	ldi	r25, 0x0C	; 12
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <Start+0x48>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <Start+0x52>
 2b6:	00 00       	nop
		_delay_ms(500);
		OFFLED3();
 2b8:	8b b1       	in	r24, 0x0b	; 11
 2ba:	8f 77       	andi	r24, 0x7F	; 127
 2bc:	8b b9       	out	0x0b, r24	; 11
		ONLED4();
 2be:	85 b1       	in	r24, 0x05	; 5
 2c0:	81 60       	ori	r24, 0x01	; 1
 2c2:	85 b9       	out	0x05, r24	; 5
 2c4:	2f ef       	ldi	r18, 0xFF	; 255
 2c6:	84 e3       	ldi	r24, 0x34	; 52
 2c8:	9c e0       	ldi	r25, 0x0C	; 12
 2ca:	21 50       	subi	r18, 0x01	; 1
 2cc:	80 40       	sbci	r24, 0x00	; 0
 2ce:	90 40       	sbci	r25, 0x00	; 0
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <Start+0x66>
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <Start+0x70>
 2d4:	00 00       	nop
		_delay_ms(500);
		OFFLED4();
 2d6:	85 b1       	in	r24, 0x05	; 5
 2d8:	8e 7f       	andi	r24, 0xFE	; 254
 2da:	85 b9       	out	0x05, r24	; 5
		ONLED5();
 2dc:	8b b1       	in	r24, 0x0b	; 11
 2de:	88 60       	ori	r24, 0x08	; 8
 2e0:	8b b9       	out	0x0b, r24	; 11
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	84 e3       	ldi	r24, 0x34	; 52
 2e6:	9c e0       	ldi	r25, 0x0C	; 12
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <Start+0x84>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <Start+0x8e>
 2f2:	00 00       	nop
		_delay_ms(500);
		OFFLED5();
 2f4:	8b b1       	in	r24, 0x0b	; 11
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	8b b9       	out	0x0b, r24	; 11
		ONLED6();
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	80 61       	ori	r24, 0x10	; 16
 2fe:	8b b9       	out	0x0b, r24	; 11
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	84 e3       	ldi	r24, 0x34	; 52
 304:	9c e0       	ldi	r25, 0x0C	; 12
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <Start+0xa2>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <Start+0xac>
 310:	00 00       	nop
		_delay_ms(500);
		OFFLED6();
 312:	8b b1       	in	r24, 0x0b	; 11
 314:	8f 7e       	andi	r24, 0xEF	; 239
 316:	8b b9       	out	0x0b, r24	; 11
		ONLED7();
 318:	88 b1       	in	r24, 0x08	; 8
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	88 b9       	out	0x08, r24	; 8
 31e:	2f ef       	ldi	r18, 0xFF	; 255
 320:	84 e3       	ldi	r24, 0x34	; 52
 322:	9c e0       	ldi	r25, 0x0C	; 12
 324:	21 50       	subi	r18, 0x01	; 1
 326:	80 40       	sbci	r24, 0x00	; 0
 328:	90 40       	sbci	r25, 0x00	; 0
 32a:	e1 f7       	brne	.-8      	; 0x324 <Start+0xc0>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <Start+0xca>
 32e:	00 00       	nop
		_delay_ms(500);
		OFFLED7();
 330:	88 b1       	in	r24, 0x08	; 8
 332:	87 7f       	andi	r24, 0xF7	; 247
 334:	88 b9       	out	0x08, r24	; 8
		ONLED8();
 336:	88 b1       	in	r24, 0x08	; 8
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	88 b9       	out	0x08, r24	; 8
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	84 e3       	ldi	r24, 0x34	; 52
 340:	9c e0       	ldi	r25, 0x0C	; 12
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <Start+0xde>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <Start+0xe8>
 34c:	00 00       	nop
		_delay_ms(500);
		OFFLED8();
 34e:	88 b1       	in	r24, 0x08	; 8
 350:	8b 7f       	andi	r24, 0xFB	; 251
 352:	88 b9       	out	0x08, r24	; 8
		ONLED9();
 354:	88 b1       	in	r24, 0x08	; 8
 356:	82 60       	ori	r24, 0x02	; 2
 358:	88 b9       	out	0x08, r24	; 8
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	84 e3       	ldi	r24, 0x34	; 52
 35e:	9c e0       	ldi	r25, 0x0C	; 12
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <Start+0xfc>
 368:	00 c0       	rjmp	.+0      	; 0x36a <Start+0x106>
 36a:	00 00       	nop
		_delay_ms(500);
		OFFLED9();
 36c:	88 b1       	in	r24, 0x08	; 8
 36e:	8d 7f       	andi	r24, 0xFD	; 253
 370:	88 b9       	out	0x08, r24	; 8
		ONLED10();
 372:	88 b1       	in	r24, 0x08	; 8
 374:	81 60       	ori	r24, 0x01	; 1
 376:	88 b9       	out	0x08, r24	; 8
 378:	2f ef       	ldi	r18, 0xFF	; 255
 37a:	84 e3       	ldi	r24, 0x34	; 52
 37c:	9c e0       	ldi	r25, 0x0C	; 12
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	80 40       	sbci	r24, 0x00	; 0
 382:	90 40       	sbci	r25, 0x00	; 0
 384:	e1 f7       	brne	.-8      	; 0x37e <Start+0x11a>
 386:	00 c0       	rjmp	.+0      	; 0x388 <Start+0x124>
 388:	00 00       	nop
		_delay_ms(500);
		OFFLED10();
 38a:	88 b1       	in	r24, 0x08	; 8
 38c:	8e 7f       	andi	r24, 0xFE	; 254
 38e:	88 b9       	out	0x08, r24	; 8
		ONLED11();
 390:	85 b1       	in	r24, 0x05	; 5
 392:	80 62       	ori	r24, 0x20	; 32
 394:	85 b9       	out	0x05, r24	; 5
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	84 e3       	ldi	r24, 0x34	; 52
 39a:	9c e0       	ldi	r25, 0x0C	; 12
 39c:	21 50       	subi	r18, 0x01	; 1
 39e:	80 40       	sbci	r24, 0x00	; 0
 3a0:	90 40       	sbci	r25, 0x00	; 0
 3a2:	e1 f7       	brne	.-8      	; 0x39c <Start+0x138>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <Start+0x142>
 3a6:	00 00       	nop
		_delay_ms(500);
		OFFLED11();
 3a8:	85 b1       	in	r24, 0x05	; 5
 3aa:	8f 7d       	andi	r24, 0xDF	; 223
 3ac:	85 b9       	out	0x05, r24	; 5
		ONLED12();
 3ae:	85 b1       	in	r24, 0x05	; 5
 3b0:	80 61       	ori	r24, 0x10	; 16
 3b2:	85 b9       	out	0x05, r24	; 5
 3b4:	2f ef       	ldi	r18, 0xFF	; 255
 3b6:	84 e3       	ldi	r24, 0x34	; 52
 3b8:	9c e0       	ldi	r25, 0x0C	; 12
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <Start+0x156>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <Start+0x160>
 3c4:	00 00       	nop
		_delay_ms(500);
		OFFLED12();
 3c6:	85 b1       	in	r24, 0x05	; 5
 3c8:	8f 7e       	andi	r24, 0xEF	; 239
 3ca:	85 b9       	out	0x05, r24	; 5
		ONLED13();
 3cc:	85 b1       	in	r24, 0x05	; 5
 3ce:	88 60       	ori	r24, 0x08	; 8
 3d0:	85 b9       	out	0x05, r24	; 5
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	84 e3       	ldi	r24, 0x34	; 52
 3d6:	9c e0       	ldi	r25, 0x0C	; 12
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <Start+0x174>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <Start+0x17e>
 3e2:	00 00       	nop
		_delay_ms(500);
		OFFLED13();
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	87 7f       	andi	r24, 0xF7	; 247
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	08 95       	ret

Disassembly of section .text.set_minutes:

000003ec <set_minutes>:
}

void set_minutes(uint8_t minutes_units,uint8_t minutes_tenths)
{	
		if(minutes_units & (1<<0))
 3ec:	80 ff       	sbrs	r24, 0
 3ee:	0b c0       	rjmp	.+22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		{
			if(100>TCNT0)
 3f0:	96 b5       	in	r25, 0x26	; 38
 3f2:	94 36       	cpi	r25, 0x64	; 100
 3f4:	20 f4       	brcc	.+8      	; 0x3fe <set_minutes+0x12>
			{
				ONLED10();
 3f6:	98 b1       	in	r25, 0x08	; 8
 3f8:	91 60       	ori	r25, 0x01	; 1
 3fa:	98 b9       	out	0x08, r25	; 8
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			}
			else
			{
				OFFLED10();
 3fe:	98 b1       	in	r25, 0x08	; 8
 400:	9e 7f       	andi	r25, 0xFE	; 254
 402:	98 b9       	out	0x08, r25	; 8
 404:	03 c0       	rjmp	.+6      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			}
		}
		else
		{
			OFFLED10();
 406:	98 b1       	in	r25, 0x08	; 8
 408:	9e 7f       	andi	r25, 0xFE	; 254
 40a:	98 b9       	out	0x08, r25	; 8
		}
		if(minutes_units & (1<<1))
 40c:	81 ff       	sbrs	r24, 1
 40e:	0b c0       	rjmp	.+22     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
		{
			if(100>TCNT0)
 410:	96 b5       	in	r25, 0x26	; 38
 412:	94 36       	cpi	r25, 0x64	; 100
 414:	20 f4       	brcc	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				ONLED11();			
 416:	95 b1       	in	r25, 0x05	; 5
 418:	90 62       	ori	r25, 0x20	; 32
 41a:	95 b9       	out	0x05, r25	; 5
 41c:	07 c0       	rjmp	.+14     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			}
			else
			{
				OFFLED11();
 41e:	95 b1       	in	r25, 0x05	; 5
 420:	9f 7d       	andi	r25, 0xDF	; 223
 422:	95 b9       	out	0x05, r25	; 5
 424:	03 c0       	rjmp	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
			}
		}
		else
		{
			OFFLED11();
 426:	95 b1       	in	r25, 0x05	; 5
 428:	9f 7d       	andi	r25, 0xDF	; 223
 42a:	95 b9       	out	0x05, r25	; 5
		}
		if(minutes_units & (1<<2))
 42c:	82 ff       	sbrs	r24, 2
 42e:	0b c0       	rjmp	.+22     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
		{
			if(100>TCNT0)
 430:	96 b5       	in	r25, 0x26	; 38
 432:	94 36       	cpi	r25, 0x64	; 100
 434:	20 f4       	brcc	.+8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
			{
				ONLED12();
 436:	95 b1       	in	r25, 0x05	; 5
 438:	90 61       	ori	r25, 0x10	; 16
 43a:	95 b9       	out	0x05, r25	; 5
 43c:	07 c0       	rjmp	.+14     	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			}
			else
			{
				OFFLED12();
 43e:	95 b1       	in	r25, 0x05	; 5
 440:	9f 7e       	andi	r25, 0xEF	; 239
 442:	95 b9       	out	0x05, r25	; 5
 444:	03 c0       	rjmp	.+6      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
			}
		}
		else
		{
			OFFLED12();
 446:	95 b1       	in	r25, 0x05	; 5
 448:	9f 7e       	andi	r25, 0xEF	; 239
 44a:	95 b9       	out	0x05, r25	; 5
		}
		if(minutes_units & (1<<3))
 44c:	83 ff       	sbrs	r24, 3
 44e:	0b c0       	rjmp	.+22     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		{
			if(100>TCNT0)
 450:	86 b5       	in	r24, 0x26	; 38
 452:	84 36       	cpi	r24, 0x64	; 100
 454:	20 f4       	brcc	.+8      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
			{
				ONLED13();
 456:	85 b1       	in	r24, 0x05	; 5
 458:	88 60       	ori	r24, 0x08	; 8
 45a:	85 b9       	out	0x05, r24	; 5
 45c:	07 c0       	rjmp	.+14     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			}
			else
			{
				OFFLED13();
 45e:	85 b1       	in	r24, 0x05	; 5
 460:	87 7f       	andi	r24, 0xF7	; 247
 462:	85 b9       	out	0x05, r24	; 5
 464:	03 c0       	rjmp	.+6      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
			}
		}
		else
		{
			OFFLED13();
 466:	85 b1       	in	r24, 0x05	; 5
 468:	87 7f       	andi	r24, 0xF7	; 247
 46a:	85 b9       	out	0x05, r24	; 5
		}
		if(minutes_tenths & (1<<0))
 46c:	60 ff       	sbrs	r22, 0
 46e:	0b c0       	rjmp	.+22     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
		{
			if(100>TCNT0)
 470:	86 b5       	in	r24, 0x26	; 38
 472:	84 36       	cpi	r24, 0x64	; 100
 474:	20 f4       	brcc	.+8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
			{
				ONLED7();
 476:	88 b1       	in	r24, 0x08	; 8
 478:	88 60       	ori	r24, 0x08	; 8
 47a:	88 b9       	out	0x08, r24	; 8
 47c:	07 c0       	rjmp	.+14     	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			}
			else
			{
				OFFLED7();	
 47e:	88 b1       	in	r24, 0x08	; 8
 480:	87 7f       	andi	r24, 0xF7	; 247
 482:	88 b9       	out	0x08, r24	; 8
 484:	03 c0       	rjmp	.+6      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
			}
		}
		else
		{
			
			OFFLED7();
 486:	88 b1       	in	r24, 0x08	; 8
 488:	87 7f       	andi	r24, 0xF7	; 247
 48a:	88 b9       	out	0x08, r24	; 8
		}
		if(minutes_tenths & (1<<1))
 48c:	61 ff       	sbrs	r22, 1
 48e:	0b c0       	rjmp	.+22     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
		{
			if(100>TCNT0)
 490:	86 b5       	in	r24, 0x26	; 38
 492:	84 36       	cpi	r24, 0x64	; 100
 494:	20 f4       	brcc	.+8      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			{
				ONLED8();
 496:	88 b1       	in	r24, 0x08	; 8
 498:	84 60       	ori	r24, 0x04	; 4
 49a:	88 b9       	out	0x08, r24	; 8
 49c:	07 c0       	rjmp	.+14     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			}
			else
			{
				OFFLED8();
 49e:	88 b1       	in	r24, 0x08	; 8
 4a0:	8b 7f       	andi	r24, 0xFB	; 251
 4a2:	88 b9       	out	0x08, r24	; 8
 4a4:	03 c0       	rjmp	.+6      	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
			}
		}
		else
		{
			
			OFFLED8();
 4a6:	88 b1       	in	r24, 0x08	; 8
 4a8:	8b 7f       	andi	r24, 0xFB	; 251
 4aa:	88 b9       	out	0x08, r24	; 8
		}
		if(minutes_tenths & (1<<2))
 4ac:	62 ff       	sbrs	r22, 2
 4ae:	0b c0       	rjmp	.+22     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
		{
			if(100>TCNT0)
 4b0:	86 b5       	in	r24, 0x26	; 38
 4b2:	84 36       	cpi	r24, 0x64	; 100
 4b4:	20 f4       	brcc	.+8      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			{
				ONLED9();
 4b6:	88 b1       	in	r24, 0x08	; 8
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	88 b9       	out	0x08, r24	; 8
 4bc:	08 95       	ret
			}
			else
			{
				OFFLED9();
 4be:	88 b1       	in	r24, 0x08	; 8
 4c0:	8d 7f       	andi	r24, 0xFD	; 253
 4c2:	88 b9       	out	0x08, r24	; 8
 4c4:	08 95       	ret
			}
		}
		else
		{
			OFFLED9();
 4c6:	88 b1       	in	r24, 0x08	; 8
 4c8:	8d 7f       	andi	r24, 0xFD	; 253
 4ca:	88 b9       	out	0x08, r24	; 8
 4cc:	08 95       	ret

Disassembly of section .text.set_hours:

000004ce <set_hours>:
		}
	}
void set_hours(uint8_t hours_units,uint8_t hours_tenths)
{
		if(hours_units & (1<<0))
 4ce:	80 ff       	sbrs	r24, 0
 4d0:	0c c0       	rjmp	.+24     	; 0x4ea <set_hours+0x1c>
		{
			if(100>TCNT2)
 4d2:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 4d6:	94 36       	cpi	r25, 0x64	; 100
 4d8:	20 f4       	brcc	.+8      	; 0x4e2 <set_hours+0x14>
			{
				ONLED3();
 4da:	9b b1       	in	r25, 0x0b	; 11
 4dc:	90 68       	ori	r25, 0x80	; 128
 4de:	9b b9       	out	0x0b, r25	; 11
 4e0:	07 c0       	rjmp	.+14     	; 0x4f0 <set_hours+0x22>
			}
			else
			{
				OFFLED3();
 4e2:	9b b1       	in	r25, 0x0b	; 11
 4e4:	9f 77       	andi	r25, 0x7F	; 127
 4e6:	9b b9       	out	0x0b, r25	; 11
 4e8:	03 c0       	rjmp	.+6      	; 0x4f0 <set_hours+0x22>
			}
		}
		else
		{
			OFFLED3();
 4ea:	9b b1       	in	r25, 0x0b	; 11
 4ec:	9f 77       	andi	r25, 0x7F	; 127
 4ee:	9b b9       	out	0x0b, r25	; 11
		}
		if(hours_units & (1<<1))
 4f0:	81 ff       	sbrs	r24, 1
 4f2:	0c c0       	rjmp	.+24     	; 0x50c <set_hours+0x3e>
		{
			if(100>TCNT2)
 4f4:	90 91 b2 00 	lds	r25, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 4f8:	94 36       	cpi	r25, 0x64	; 100
 4fa:	20 f4       	brcc	.+8      	; 0x504 <set_hours+0x36>
			{
				ONLED4();
 4fc:	95 b1       	in	r25, 0x05	; 5
 4fe:	91 60       	ori	r25, 0x01	; 1
 500:	95 b9       	out	0x05, r25	; 5
 502:	07 c0       	rjmp	.+14     	; 0x512 <set_hours+0x44>
			}
			else
			{
				OFFLED4();
 504:	95 b1       	in	r25, 0x05	; 5
 506:	9e 7f       	andi	r25, 0xFE	; 254
 508:	95 b9       	out	0x05, r25	; 5
 50a:	03 c0       	rjmp	.+6      	; 0x512 <set_hours+0x44>
			}
		}
		else
		{
			OFFLED4();
 50c:	95 b1       	in	r25, 0x05	; 5
 50e:	9e 7f       	andi	r25, 0xFE	; 254
 510:	95 b9       	out	0x05, r25	; 5
		}
		if(hours_units & (1<<2))
 512:	82 ff       	sbrs	r24, 2
 514:	0b c0       	rjmp	.+22     	; 0x52c <set_hours+0x5e>
		{
			if(100>TCNT0)
 516:	96 b5       	in	r25, 0x26	; 38
 518:	94 36       	cpi	r25, 0x64	; 100
 51a:	20 f4       	brcc	.+8      	; 0x524 <set_hours+0x56>
			{
				ONLED5();
 51c:	9b b1       	in	r25, 0x0b	; 11
 51e:	98 60       	ori	r25, 0x08	; 8
 520:	9b b9       	out	0x0b, r25	; 11
 522:	07 c0       	rjmp	.+14     	; 0x532 <set_hours+0x64>
			}
			else
			{
				OFFLED5();
 524:	9b b1       	in	r25, 0x0b	; 11
 526:	97 7f       	andi	r25, 0xF7	; 247
 528:	9b b9       	out	0x0b, r25	; 11
 52a:	03 c0       	rjmp	.+6      	; 0x532 <set_hours+0x64>
			}
		}
		else
		{
			OFFLED5();
 52c:	9b b1       	in	r25, 0x0b	; 11
 52e:	97 7f       	andi	r25, 0xF7	; 247
 530:	9b b9       	out	0x0b, r25	; 11
		}
		if(hours_units & (1<<3))
 532:	83 ff       	sbrs	r24, 3
 534:	0c c0       	rjmp	.+24     	; 0x54e <set_hours+0x80>
		{
			if(100>TCNT2)
 536:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 53a:	84 36       	cpi	r24, 0x64	; 100
 53c:	20 f4       	brcc	.+8      	; 0x546 <set_hours+0x78>
			{
				ONLED6();
 53e:	8b b1       	in	r24, 0x0b	; 11
 540:	80 61       	ori	r24, 0x10	; 16
 542:	8b b9       	out	0x0b, r24	; 11
 544:	07 c0       	rjmp	.+14     	; 0x554 <set_hours+0x86>
			}
			else
			{
				OFFLED6();
 546:	8b b1       	in	r24, 0x0b	; 11
 548:	8f 7e       	andi	r24, 0xEF	; 239
 54a:	8b b9       	out	0x0b, r24	; 11
 54c:	03 c0       	rjmp	.+6      	; 0x554 <set_hours+0x86>
			}
		}
		else
		{
			OFFLED6();
 54e:	8b b1       	in	r24, 0x0b	; 11
 550:	8f 7e       	andi	r24, 0xEF	; 239
 552:	8b b9       	out	0x0b, r24	; 11
		}
		if(hours_tenths & (1<<0))
 554:	60 ff       	sbrs	r22, 0
 556:	0c c0       	rjmp	.+24     	; 0x570 <set_hours+0xa2>
		{
			if(100>TCNT2)
 558:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 55c:	84 36       	cpi	r24, 0x64	; 100
 55e:	20 f4       	brcc	.+8      	; 0x568 <set_hours+0x9a>
			{
				ONLED1();
 560:	8b b1       	in	r24, 0x0b	; 11
 562:	80 62       	ori	r24, 0x20	; 32
 564:	8b b9       	out	0x0b, r24	; 11
 566:	07 c0       	rjmp	.+14     	; 0x576 <set_hours+0xa8>
			}
			else
			{
				OFFLED1();
 568:	8b b1       	in	r24, 0x0b	; 11
 56a:	8f 7d       	andi	r24, 0xDF	; 223
 56c:	8b b9       	out	0x0b, r24	; 11
 56e:	03 c0       	rjmp	.+6      	; 0x576 <set_hours+0xa8>
			}
		}
		else
		{
			OFFLED1();
 570:	8b b1       	in	r24, 0x0b	; 11
 572:	8f 7d       	andi	r24, 0xDF	; 223
 574:	8b b9       	out	0x0b, r24	; 11
		}
		if(hours_tenths & (1<<1))
 576:	61 ff       	sbrs	r22, 1
 578:	0c c0       	rjmp	.+24     	; 0x592 <set_hours+0xc4>
		{
			if(100>TCNT2)
 57a:	80 91 b2 00 	lds	r24, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
 57e:	84 36       	cpi	r24, 0x64	; 100
 580:	20 f4       	brcc	.+8      	; 0x58a <set_hours+0xbc>
			{
				ONLED2();
 582:	8b b1       	in	r24, 0x0b	; 11
 584:	80 64       	ori	r24, 0x40	; 64
 586:	8b b9       	out	0x0b, r24	; 11
 588:	08 95       	ret
			}
			else
			{
				OFFLED2();
 58a:	8b b1       	in	r24, 0x0b	; 11
 58c:	8f 7b       	andi	r24, 0xBF	; 191
 58e:	8b b9       	out	0x0b, r24	; 11
 590:	08 95       	ret
			}
		}
		else
		{
			OFFLED2();
 592:	8b b1       	in	r24, 0x0b	; 11
 594:	8f 7b       	andi	r24, 0xBF	; 191
 596:	8b b9       	out	0x0b, r24	; 11
 598:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000088c <_fini>:
 88c:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000088e <__funcs_on_exit>:
 88e:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000890 <__simulator_exit>:
 890:	08 95       	ret

Disassembly of section .text.exit:

000007fc <exit>:
 7fc:	ec 01       	movw	r28, r24
 7fe:	0e 94 47 04 	call	0x88e	; 0x88e <__funcs_on_exit>
 802:	0e 94 46 04 	call	0x88c	; 0x88c <_fini>
 806:	ce 01       	movw	r24, r28
 808:	0e 94 48 04 	call	0x890	; 0x890 <__simulator_exit>
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 44 04 	call	0x888	; 0x888 <_Exit>

Disassembly of section .text._Exit:

00000888 <_Exit>:
 888:	0e 94 5f 00 	call	0xbe	; 0xbe <_exit>
